{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"calciumImagingAnalysis ( CIAPKG or CIAtah ) \u00b6 Created by Biafra Ahanonu, PhD . calciumImagingAnalysis ( CIAPKG ) or CIAtah (pronounced cheetah) is a software package for analysis of one- and two-photon calcium imaging datasets. Download the software at https://github.com/bahanonu/calciumImagingAnalysis . This user guide contains instructions to setup, run, and troubleshoot CIAPKG . Note: CIAPKG is a class ( calciumImagingAnalysis ) with various GUIs to allow processing of calcium imaging data. In addition, users can access the underlying CIAPKG functions to make custom workflows. See Custom command-line pipelines . Read my overview of calcium imaging analysis methods at Calcium imaging cell identification and fluorescence activity trace reconstruction, part 1 . CIAPKG features: Includes a GUI to allow users to do large-scale batch analysis, accessed via the repository's calciumImagingAnalysis class. The underlying functions can also be used to create GUI-less, command line-ready analysis pipelines. Functions located in ciapkg and +ciapkg sub-folders. Includes all major calcium imaging analysis steps: pre-processing (motion correction, spatiotemporal downsampling, spatial filtering, relative fluorescence calculation, etc.), support for multiple cell-extraction methods, automated cell classification (coming soon!), cross-session cell alignment, and more. Has several example one- and two-photon calcium imaging datasets that it will automatically download to help users test out the package. Includes code for determining animal position (e.g. in open-field assay). Supports Neurodata Without Borders data standard (see calcium imaging tutorial ) for reading/writing cell-extraction (e.g. outputs of PCA-ICA, CELLMax, CNMF, CNMF-E, etc.). Supports reading and writing NWB movie files with continued integration with NWB planned. Requires MATLAB . Navigation \u00b6 The main sections of the site: Setup - installation of CIAPKG . Repository - notes about the software package and data formats. Processing data - sections related to processing calcium imaging movies using the CIAPKG class. API - details how to run CIAPKG from the command line. Will include more details on the many underlying functions in the future. Help - several section that provide hints and help for processing calcium imaging. Misc - miscellaneous information about the repository. References \u00b6 Please cite our Corder , Ahanonu , et al. Science , 2019 publication if you used the software package or code from this repository to advance or help your research. Questions? \u00b6 Please open an issue on GitHub or email any additional questions not covered in the repository to bahanonu [at] alum.mit.edu . Made in USA. (starting 2020.09.16) (starting 2020.09.22)","title":"Home"},{"location":"#calciumimaginganalysis-ciapkg-or-ciatah","text":"Created by Biafra Ahanonu, PhD . calciumImagingAnalysis ( CIAPKG ) or CIAtah (pronounced cheetah) is a software package for analysis of one- and two-photon calcium imaging datasets. Download the software at https://github.com/bahanonu/calciumImagingAnalysis . This user guide contains instructions to setup, run, and troubleshoot CIAPKG . Note: CIAPKG is a class ( calciumImagingAnalysis ) with various GUIs to allow processing of calcium imaging data. In addition, users can access the underlying CIAPKG functions to make custom workflows. See Custom command-line pipelines . Read my overview of calcium imaging analysis methods at Calcium imaging cell identification and fluorescence activity trace reconstruction, part 1 . CIAPKG features: Includes a GUI to allow users to do large-scale batch analysis, accessed via the repository's calciumImagingAnalysis class. The underlying functions can also be used to create GUI-less, command line-ready analysis pipelines. Functions located in ciapkg and +ciapkg sub-folders. Includes all major calcium imaging analysis steps: pre-processing (motion correction, spatiotemporal downsampling, spatial filtering, relative fluorescence calculation, etc.), support for multiple cell-extraction methods, automated cell classification (coming soon!), cross-session cell alignment, and more. Has several example one- and two-photon calcium imaging datasets that it will automatically download to help users test out the package. Includes code for determining animal position (e.g. in open-field assay). Supports Neurodata Without Borders data standard (see calcium imaging tutorial ) for reading/writing cell-extraction (e.g. outputs of PCA-ICA, CELLMax, CNMF, CNMF-E, etc.). Supports reading and writing NWB movie files with continued integration with NWB planned. Requires MATLAB .","title":"calciumImagingAnalysis (CIAPKG or CIAtah)"},{"location":"#navigation","text":"The main sections of the site: Setup - installation of CIAPKG . Repository - notes about the software package and data formats. Processing data - sections related to processing calcium imaging movies using the CIAPKG class. API - details how to run CIAPKG from the command line. Will include more details on the many underlying functions in the future. Help - several section that provide hints and help for processing calcium imaging. Misc - miscellaneous information about the repository.","title":"Navigation"},{"location":"#references","text":"Please cite our Corder , Ahanonu , et al. Science , 2019 publication if you used the software package or code from this repository to advance or help your research.","title":"References"},{"location":"#questions","text":"Please open an issue on GitHub or email any additional questions not covered in the repository to bahanonu [at] alum.mit.edu . Made in USA. (starting 2020.09.16) (starting 2020.09.22)","title":"Questions?"},{"location":"acknowledgments/","text":"Acknowledgments \u00b6 Thanks to Jones G. Parker, PhD ( https://parker-laboratory.com/ ) for providing extensive user feedback during development of the calciumImagingAnalysis software package. Additional thanks to Drs. Jesse Marshall, J\u00e9r\u00f4me Lecoq, Tony H. Kim, Hakan Inan, Lacey Kitch, Maggie Larkin, Elizabeth Otto Hamel, Laurie Burns, and Claudia Schmuckermair for providing feedback, specific functions, or helping develop aspects of the code used in the calciumImagingAnalysis software package.","title":"Acknowledgments"},{"location":"acknowledgments/#acknowledgments","text":"Thanks to Jones G. Parker, PhD ( https://parker-laboratory.com/ ) for providing extensive user feedback during development of the calciumImagingAnalysis software package. Additional thanks to Drs. Jesse Marshall, J\u00e9r\u00f4me Lecoq, Tony H. Kim, Hakan Inan, Lacey Kitch, Maggie Larkin, Elizabeth Otto Hamel, Laurie Burns, and Claudia Schmuckermair for providing feedback, specific functions, or helping develop aspects of the code used in the calciumImagingAnalysis software package.","title":"Acknowledgments"},{"location":"alldocs/","text":"calciumImagingAnalysis \u00b6 Note: in general use the individual pages in the navigation pane on the left, as those will be most up-to-date. Software package for calcium imaging analysis of one- and two-photon imaging datasets. Includes a GUI to allow users to do large-scale batch analysis, accessed via the repository's calciumImagingAnalysis class. The underlying functions can also be used to create GUI-less, command line-ready analysis pipelines. Functions located in ciapkg and +ciapkg sub-folders. Includes all major calcium imaging analysis steps: pre-processing (motion correction, spatiotemporal downsampling, spatial filtering, relative fluorescence calculation, etc.), support for multiple cell-extraction methods, automated cell classification (coming soon!), cross-session cell alignment, and more. Has several example calcium imaging datasets that it will automatically download to help users test out the package. Includes code for determining animal position (e.g. in open-field assay). Supports Neurodata Without Borders data standard (see calcium imaging tutorial ) for reading/writing cell-extraction (e.g. outputs of PCA-ICA, CELLMax, CNMF, CNMF-E, etc.). Supports reading NWB movie files (write support coming soon). Requires MATLAB . Contact: Biafra Ahanonu, PhD (bahanonu [at] alum [dot] mit [dot] edu) . Made in USA. Contents \u00b6 Quick start guide Acknowledgments References Questions Detailed README Repository notes Installation Data Processing calcium imaging data Check movie registration before pre-processing with viewMovieRegistrationTest Preprocessing calcium imaging movies with modelPreprocessMovie Manual movie cropping with modelModifyMovies Extracting cells with modelExtractSignalsFromMovie Loading cell-extraction output data with modelVarsFromFiles Validating cell extraction with viewCellExtractionOnMovie Sorting cell extraction outputs with computeManualSortSignals Removing cells not within brain region with modelModifyRegionAnalysis Cross-session cell alignment with computeMatchObjBtwnTrials ImageJ+MATLAB based mouse location tracking License Quick start guide \u00b6 Below are steps needed to quickly get started using the calciumImagingAnalysis software package in MATLAB. Clone the calciumImagingAnalysis repository (using GitHub desktop or command line) or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis root folder ( NOT @calciumImagingAnalysis sub-folder in the repository). Alternatively, download the package from File Exchange using the Add-Ons explorer in MATLAB. See calciumImagingAnalysis entry at: or https://www.mathworks.com/matlabcentral/fileexchange/75466-calciumimaginganalysis . Run the below MATLAB commands. Afterwards, likely want to run modelAddNewFolders module first in order to add folders containing imaging data to the current class object. [Optional] Users on Windows systems should download Everything ( https://www.voidtools.com/ ). It is a very useful and extremely fast search engine for files and folders on a computer that can allow users to quickly get lists of folders then need to analyze in calciumImagingAnalysis . [Optional] Users who want to run analysis via the command line can run edit ciapkg.demo.cmdLinePipeline and run each segment of code there to see what commands are needed to perform each step. It assumes you have already run example_downloadTestData . % Run these commands in MATLAB to get started. % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Runs routines to check dependencies and help user get setup. obj.setup; % Open the class menu (always type `obj` then enter load the class/modules menu) obj % then hit enter, no semicolon! calciumImagingAnalysis main GUI notes \u00b6 All main decisions for choosing a method/procedure to run, cell-extraction algorithm, and which folders to analyze are in a single window. The GUI will real-time update the selected folders based on the selections in the subject, assay, and folder filter areas. Sections not relevant for a specific method are grayed out. Tab to cycle through selection areas. Green background is the currently selected area, dark gray background is area that had previously been selected but is not the active area, and white background is for areas that have not been selected yet. Hover mouse over method names for tooltip that gives additional information. For example, selecting middle two assays automatically changes selection in Loaded folders section. Certain sections become available when user selects the appropriate method (e.g. cell-extraction method available when selecting modelExtractSignalsFromMovie ). Additional quick start notes \u00b6 See additional details in Processing calcium imaging data for running the full processing pipeline. To force load all directories, including most external software packages (in _external_programs folder), type ciapkg.loadAllDirs; into MATLAB command line. This is most relevant when you need to access specific functions in an outside repository that are normally hidden until needed. When issues are encountered, first check the *Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue or email Biafra (bahanonu [at] alum.mit.edu). Notes: There are two sets of test data that are downloaded: Single session analysis : data\\2014_04_01_p203_m19_check01_raw can be used to test the pipeline until the cross-session alignment step. Batch analysis : data\\batch contains three imaging sessions that should be processed and can then be used for the cross-session alignment step. Users should try these sessions to get used to batched analysis. For Fiji dependency, when path to Miji.m (e.g. \\Fiji.app\\scripts folder) is requested, likely in calciumImagingAnalysis\\_external_programs\\FIJI_FOLDER\\Fiji.app\\scripts where FIJI_FOLDER varies depending on OS, unless the user requested a custom path or on OSX (in which case, find Fiji the install directory). If you run into Java heap space memory errors when Miji tries to load Fiji in MATLAB, make sure \"java.opts\" file is in MATLAB start-up folder or that calciumImagingAnalysis folder is the MATLAB start-up folder ( instructions on changing ). calciumImagingAnalysis often uses regular expressions to find relevant movie and other files in folders to analyze. For example, by default it looks for any movie files in a folder containing concat , e.g. concat_recording_20140401_180333.h5 (test data). If you have a file called rawData_2019_01_01_myInterestingExperiment.avi and all your raw data files start with rawData_ then change the regular expression to rawData_ when requested by the repository. See setMovieInfo module to change after adding new folders. calciumImagingAnalysis generally assumes users have imaging data associated with one imaging session and animal in a given folder. Follow folder naming conventions in Data for best experience. External software packages are downloaded into _external_programs folder and should be placed there if done manually. Users can alternatively run setup as below. % Run these commands in MATLAB to get started. % Loads all directories loadBatchFxns; % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Download and load dependent software packages into \"_external_programs\" folder. % Also download test data into \"data\" folder. % Normally only need to one once after first downloading calciumImagingAnalysis package. obj.loadDependencies; % Add folders containing imaging data. obj.modelAddNewFolders; % [optional] Set the names calciumImagingAnalysis will look for in each folder obj.setMovieInfo; % Open class menu to pick module to run. obj.runPipeline; % then hit enter! Acknowledgments \u00b6 Thanks to Jones G. Parker, PhD ( https://parker-laboratory.com/ ) for providing extensive user feedback during development of the calciumImagingAnalysis software package. Additional thanks to Drs. Jesse Marshall, J\u00e9r\u00f4me Lecoq, Tony H. Kim, Hakan Inan, Lacey Kitch, Maggie Larkin, Elizabeth Otto Hamel, Laurie Burns, and Claudia Schmuckermair for providing feedback, specific functions, or helping develop aspects of the code used in the calciumImagingAnalysis software package. References \u00b6 Please cite Corder , Ahanonu , et al. 2019 Science publication or the Ahanonu, 2018 Zenodo release if you used the software package or code from this repository to advance/help your research: @article{corderahanonu2019amygdalar, title={An amygdalar neural ensemble that encodes the unpleasantness of pain}, author={Corder, Gregory and Ahanonu, Biafra and Grewe, Benjamin F and Wang, Dong and Schnitzer, Mark J and Scherrer, Gr{\\'e}gory}, journal={Science}, volume={363}, number={6424}, pages={276--281}, year={2019}, publisher={American Association for the Advancement of Science} } @misc{biafra_ahanonu_2018_2222295, author = {Biafra Ahanonu}, title = {{calciumImagingAnalysis: a software package for analyzing one- and two-photon calcium imaging datasets.}}, month = December, year = 2018, doi = {10.5281/zenodo.2222295}, url = {https://doi.org/10.5281/zenodo.2222295} } Questions? \u00b6 Please email any additional questions not covered in the repository to bahanonu [at] alum.mit.edu or open an issue. Detailed README \u00b6 All the remaining sections encompass a more detailed README that provide a step-by-step instructions for running the entire analysis pipeline along with notes, tips, data organization, and other information. Repository notes \u00b6 Covers preprocessing of calcium imaging videos, cell and activity trace extraction (supports the following methods: PCA-ICA, CELLMax, EXTRACT, CNMF, CNMF-E, and ROI), manual and automated sorting of cell extraction outputs, cross-session alignment of cells, and more. Supports PCA-ICA , CNMF , CNMF-E , and ROI cell extraction methods publicly along with CELLMax and EXTRACT for Schnitzer Lab collaborators. Additional methods can be integrated upon request. Most extensively tested on Windows MATLAB 2018b and 2019a . Moderate testing on Windows MATLAB 2015b , 2017a , 2017b , and 2018b along with OSX (10.10.5) 2017b and 2018b . Individual functions and calciumImagingAnalysis class should work on other MATLAB versions after 2015b , but submit an issue if errors occur. Newer MATLAB version preferred. This repository consists of code used in and released with G. Corder , __B. Ahanonu __, B. F. Grewe, D. Wang, M. J. Schnitzer, and G. Scherrer (2019). An amygdalar neural ensemble encoding the unpleasantness of painful experiences. Science , 363, 276-281. http://science.sciencemag.org/content/363/6424/276 . and similar code helped process imaging or behavioral data in: J.G. Parker , J.D. Marshall , B. Ahanonu , Y.W. Wu, T.H. Kim, B.F. Grewe, Y. Zhang, J.Z. Li, J.B. Ding, M.D. Ehlers, and M.J. Schnitzer (2018). Diametric neural ensemble dynamics in parkinsonian and dyskinetic states. Nature , 557, 177\u2013182. https://doi.org/10.1038/s41586-018-0090-6 . Y. Li, A. Mathis, B.F. Grewe, J.A. Osterhout, B. Ahanonu, M.J. Schnitzer, V.N. Murthy, and C. Dulac (2017). Neuronal representation of social information in the medial amygdala of awake behaving mice. Cell, 171(5), 1176-1190. https://doi.org/10.1016/j.cell.2017.10.015 . Code mostly developed while in Prof. Mark Schnitzer's lab at Stanford University. Credit to those who helped in Acknowledgments . Please check the 'Wiki' for further instructions on specific processing/analysis steps and additional information of software used by this package. When issues are encountered, first check the Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue. Installation \u00b6 Clone the calciumImagingAnalysis repository or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis folder. Run loadBatchFxns.m before using functions in the directory. This adds all needed directories and sub-directories to the MATLAB path. Type obj = calciumImagingAnalysis; into MATLAB command window and follow instructions that appear after to add data and run analysis. Run the calciumImagingAnalysis class method loadDependencies or type obj.loadDependencies after initializing a calciumImagingAnalysis object into the command window to download and add Fiji to path, download CNMF/CNMF-E repositories, download/setup CVX (for CNMF/CNMF-E), and download example data. Note Place calciumImagingAnalysis in a folder where MATLAB will have write permissions, as it also creates a private subdirectory to store some user information along with downloading required external software packages. file_exchange folder contains File Exchange functions used by calciumImagingAnalysis . In general, it is best to set the MATLAB startup directory to the calciumImagingAnalysis folder. This allows java.opts and startup.m to set the correct Java memory requirements and load the correct folders into the MATLAB path. If calciumImagingAnalysis IS NOT the startup folder, place java.opts wherever the MATLAB startup folder is so the correct Java memory requirements are set (important for using ImageJ/Miji in MATLAB). If it appears an old calciumImagingAnalysis repository is loaded after pulling a new version, run restoredefaultpath and check that old calciumImagingAnalysis folders are not in the MATLAB path. Test data \u00b6 To download test data, run loadDependencies module (e.g. obj.loadDependencies ) and select Download test one-photon data. option to download example one-photon miniature microscope test data to use for testing calciumImagingAnalysis preprocessing, cell extraction, and cell classification code. The data will be located in the data folder within the repository root directory. Else run example_downloadTestData.m if haven't started an instance of calciumImagingAnalysis. Dependencies \u00b6 By default external MATLAB-based software packages are stored in _external_programs . MATLAB Toolbox dependencies \u00b6 Primary toolboxes distrib_computing_toolbox image_toolbox signal_toolbox statistics_toolbox Secondary toolboxes (not required for main pre-processing pipeline) video_and_image_blockset bioinformatics_toolbox financial_toolbox neural_network_toolbox Parallel Computing Toolbox (PCT) \u00b6 By default both calciumImagingAnalysis and PCT auto-start a parallel pool for functions that use parallelization (e.g. or calls to parfor ). For some users this may not be desired, in that case go to MATLAB preferences and uncheck the below. Or enter the following commands into the MATLAB command window: parSet = parallel.Settings; parSet.Pool.AutoCreate = false; ImageJ \u00b6 Run downloadMiji from downloads\\downloadMiji.m or obj.loadDependencies (when class initialized) to download Fiji version appropriate to your platform. Else download Fiji (preferably 2015 December 22 version): https://imagej.net/Fiji/Downloads . Make sure have Miji in Fiji installation: http://bigwww.epfl.ch/sage/soft/mij/ . This is used as an alternative to the calciumImagingAnalysis playMovie.m function for viewing movies and is needed for some movie modification steps. Saleae \u00b6 Only download if doing behavior and imaging experiments that use this DAQ device to collect data. Download 1.2.26: https://support.saleae.com/logic-software/legacy-software/older-software-releases#1-2-26-download . CNMF and CNMF-E \u00b6 Download repositories by running downloadCnmfGithubRepositories.m or obj.loadDependencies (when class is initialized). CNMF: https://github.com/flatironinstitute/CaImAn-MATLAB . CNMF-E: https://github.com/bahanonu/CNMF_E forked from https://github.com/zhoupc/CNMF_E to fix HDF5, movies with NaNs, and other related compatibility issues. CVX: http://cvxr.com/cvx/download/ . Download All platforms ( Redistributable: free solvers only ), e.g. http://web.cvxr.com/cvx/cvx-rd.zip . Neurodata Without Borders \u00b6 Neurodata Without Borders (NWB) file support requires the following GitHub repositories be present in the _external_programs folder. These are downloaded automatically when running obj.setup . https://github.com/schnitzer-lab/nwb_schnitzer_lab . https://github.com/ewiger/yamlmatlab . https://github.com/NeurodataWithoutBorders/matnwb . Repository organization \u00b6 Below are a list of the top-level directories and what types of functions or files are within. @calciumImagingAnalysis - Contains calciumImagingAnalysis class and associated methods for calcium imaging analysis. external programs _ - External software packages (e.g. CNMF, CELLMax, and others) are stored here. overloaded - Functions that overload core MATLAB functions to add functionality or fix display issues. behavior - Processing of behavior files (e.g. accelerometer data, Saleae files, etc.). classification - Classification of cells, e.g. manual classification of cell extraction outputs or cross-session grouping of cells. data - Location of test data. download - Functions that help download external code packages or data. file_exchange - Contains any outside code from MATLAB's File Exchange that are dependencies in repository functions. hdf5 - Functions concerned with HDF5 input/output. image - Functions concerned with processing images (or [x y] matrices). inscopix - Functions concerned with Inscopix-specific data processing (e.g. using the ISX MATLAB API). io - Contains functions concerned with file or function input-output. motion_correction - Functions concerned with motion correction. movie_processing - Functions concerned with preprocessing calcium imaging videos, e.g. spatial filtering, downsampling, etc. neighbor - Detection and display of neighboring cell information. private - This directory contains various user settings, output pictures/data/logs from calciumImagingAnalysis modules, and more. This directory is NOT included in the MATLAB path, hence is good for storing related scripts without interfering with calciumImagingAnalysis . python - Python code, e.g. for processing Saleae data. serial - Code for saving and processing serial port data, e.g. Arduino streaming data. settings - Functions concerned with settings for other functions. signal_extraction - Functions related to cell extraction, e.g. running PCA-ICA. signal_processing - Functions to process cell activity traces. tracking - ImageJ and MATLAB functions to track animal location in behavior movies. unit_tests [optional] - Functions to validate specific repository functions. video - Functions to manipulate or process videos, e.g. making movie montages or adding dropped frames. view - Functions concerned with displaying data or information to the user, normally do not process data. Data \u00b6 The class generally operates on the principal that a single imaging session is contained within a single folder or directory. Thus, even if a single imaging session contains multiple trials (e.g. the imaging data is split across multiple movies) this is fine as the class will concatenate them during the preprocessing step. The naming convention in general is below. Both TIF and AVI raw files are converted to HDF5 after processing since that format offers more flexibility during cell extraction and other steps. Input and output files \u00b6 Default raw imaging data filename: concat_.*.(h5|tif) . Default raw processed data filename: folderName_(processing steps).h5 , where folderName is the directory name where the calcium imaging movies are located. Main files output by calciumImagingAnalysis . Below, .* normally indicates the folder name prefixed to the filename. .*_pcaicaAnalysis.mat : Where PCA-ICA outputs are stored. .*_ICdecisions_.*.mat : Where decisions for cell (=1) and not cell (=0) are stored in a valid variable. .*_regionModSelectUser.mat : A mask of the region (=1) to include in further analyses. .*_turboreg_crop_dfof_1.h5 : Processed movie, in this case motion corrected, cropped, and \u0394_F/F_. processing_info : a folder containing preprocessing information. NWB Support \u00b6 calciumImagingAnalysis supports NWB format and by default will output cell-extraction analysis as calciumImagingAnalysis format unless user specifies otherwise. NWB files are by default stored in the nwbFiles sub-folder. This can be changed by setting the obj.nwbFileFolder property to a different folder name. Default image mask HDF5 dataset name: '/processing/ophys/ImageSegmentation/PlaneSegmentation'. Default fluorescence activity HDF5 dataset name: '/processing/ophys/Fluorescence/RoiResponseSeries'. Preferred folder naming format \u00b6 Folders should following the format YYYY_MM_DD_pXXX_mXXX_assayXX_trialXX where: YYYY_MM_DD = normal year/month/day scheme. pXXX = protocol number, e.g. p162, for the set of experiments performed for the same set of animals. mXXX = subject ID/number, e.g. m805 or animal ID. assayXX = assay ID and session number, e.g. vonfrey01 is the 1st von Frey assay session. trialXX = the trial number of the current assay session, only applicable if multiple trials in the same assay session. Videos \u00b6 HDF5: Saved as a [x y t] 3D matrix where x and y are the height and width of video while t is number of frames. /1 as the name for directory containing movie data. HDF can be read in using Fiji, see http://lmb.informatik.uni-freiburg.de/resources/opensource/imagej_plugins/hdf5.html . Each HDF5 file should contain imaging data in a dataset name, e.g. /1 is the default datasetname for [x y frames] 2D calcium imaging movies in this repository. Most functions have a inputDatasetName option to specify the dataset name if different from /1 . TIF Normal [x y frames] tif. AVI Raw uncompressed grayscale [x y frames] avi. Cell images \u00b6 IC filters from PCA-ICA and images from CNMF(-E). [x y n] matrix x and y being height/width of video and n is number of ICs output. Cell traces \u00b6 IC traces from PCA-ICA and images from CNMF(-E). [n f] matrix. n is number of ICs output and f is number of movie frames. Processing calcium imaging data \u00b6 The general pipeline for processing calcium imaging data is below. This repository includes code to do nearly every step. To start using the calciumImagingAnalysis software package, enter the following into the MATLAB command window. % Loads all directories loadBatchFxns; % Loads the class into an object. obj = calciumImagingAnalysis; % Open the class menu obj % then hit enter, no semicolon! % Alternatively obj.runPipeline; % then hit enter! The general order of functions that users should run is ([optional] are those not critical for most datasets): loadDependencies If user is running calciumImagingAnalysis for the first time, this module has several options to download and load CNMF/CNMF-E code for cell extraction, Fiji for viewing/modifying videos (using Miji), and test data from a miniature microscope experiment. modelDownsampleRawMovies [optional] If users have raw calcium imaging data that needs to be spatially downsampled, e.g. raw data from Inscopix nVista software. modelAddNewFolders Users should always use this method first, used to add folders to the current class object. For example, if users ran example_downloadTestData.m , then add the folder [githubRepoPath]\\data\\2014_04_01_p203_m19_check01_raw where githubRepoPath is the absolute path to the current calciumImagingAnalysis repository. viewMovie Users should check that calciumImagingAnalysis loads their movies correctly and that Miji is working. Remember to check that Imaging movie regexp: (regular expression class uses to find user movies within given folders) setting matches name of movies currently in repository. viewMovieRegistrationTest [optional] Users can check different spatial filtering and registration settings. tregRunX folders (where X is a number) contain details of each run setting. Delete from analysis folder if don't need outputs later. Remember to adjust contrast in resulting montage movies since different filtering will change the absolute pixel values. modelPreprocessMovie Main processing method for calciumImagingAnalysis. Performs motion correction, spatial filtering, cropping, down-sampling, and relative fluorescence calculations. If using Inscopix nVista 1.0 or 2.0, also will correct for dropped frames. modelModifyMovies GUI that allows users to remove movie regions not relevant to cell extraction. modelExtractSignalsFromMovie Performs cell extraction, currently PCA-ICA with the ability to run more recent algorithms (e.g. CNMF) upon request. modelVarsFromFiles Run after modelExtractSignalsFromMovie to load cell image and trace information into the current class object. viewCellExtractionOnMovie [optional] This function overlays the cell extraction outputs on snippets of the processed video, allowing users to check that cell extraction correctly identified all the cells. computeManualSortSignals A GUI to allow users to classify cells and not cells in cell extraction outputs. modelModifyRegionAnalysis [optional] Users are able to select specific cells from cell extraction manual sorting to include in further analyses. computeMatchObjBtwnTrials Method to register cells across imaging sessions. Also includes visual check GUI in viewMatchObjBtwnSessions method. Note: it is heavily advised that throughout a particular animal's imaging sessions, that you keep the acquisition frame dimensions identical. This makes cross-session registration easier. Else you will have to crop all sessions for that animal to the same size ensuring that the area of interest is present in each. Spatially downsample raw movies or convert to HDF5 with modelDownsampleRawMovies \u00b6 Users have the ability to spatially downsample raw movies, often necessary to denoise the data, save storage space, and improve runtimes of later processing steps. For most data, users can downsample 2 or 4 times in each spatial dimension while still retaining sufficient pixels per cell to facilitate cell-extraction. To run, either select modelDownsampleRawMovies in the GUI menu or type the below command after initializing a calciumImagingAnalysis obj. obj.modelDownsampleRawMovies; This will pop-up the following screen. Users can input several folders where ISXD files are by separating each folder path with a comma ( Folder(s) where raw HDF5s are located ), specify a common root folder to save files to ( Folder to save downsampled HDF5s to: ), and input a root directory that contains the sub-folders with the raw data ( Decompression source root folder(s) ). The function will automatically put each file in its corresponding folder, make sure folder names are unique (this should be done anyways for data analysis reasons). Converting Inscopix ISXD files to HDF5 \u00b6 To convert from Inscopix ISXD file format (output by nVista v3+ and nVoke) to HDF5 run modelDownsampleRawMovies without changing the regular expression or make sure it looks for .*.isxd or similar. Users will need the latest version of the Inscopix Data Processing Software as these functions take advantage of their API. If calciumImagingAnalysis cannot automatically find the API, it will ask the user to direct it to the root location of the Inscopix Data Processing Software (see below). Check movie registration before pre-processing with viewMovieRegistrationTest \u00b6 Users should spatially filter one-photon or other data with background noise (e.g. neuropil). To get a feel for how the different spatial filtering affects SNR/movie data before running the full processing pipeline, run viewMovieRegistrationTest module. Then select either matlab divide by lowpass before registering or matlab bandpass before registering then change filterBeforeRegFreqLow and filterBeforeRegFreqHigh settings, see below. Within each folder will be a sub-folder called preprocRunTest inside of which is a series of sub-folders called preprocRun## that will contain a file called settings.mat that can be loaded into modelPreprocessMovie so the same settings that worked during the test can be used during the actual pre-processing run. You'll get an output like the below: A : The top left is without any filtering while the other 3 are with different bandpass filtering options. B : Cell \u0394F/F intensity profile from the raw movie. Obtain by selecting Analyze->Plot profile from Fiji menu after selecting a square segment running through a cell. C : Same cell \u0394F/F intensity profile from the bottom/left movie (note the y-axis is the same as above). Obtained in same manner as B . Preprocessing calcium imaging movies with modelPreprocessMovie \u00b6 After users instantiate an object of the calciumImagingAnalysis class and enter a folder, they can start preprocessing of their calcium imaging data with modelPreprocessMovie . See below for a series of windows to get started, the options for motion correction, cropping unneeded regions, \u0394_F/F_, and temporal downsampling were selected for use in the study associated with this repository. If users have not specified the path to Miji, a window appears asking them to select the path to Miji's scripts folder. If users are using the test dataset, it is recommended that they do not use temporal downsampling. Vertical and horizontal stripes in movies (e.g. CMOS camera artifacts) can be removed via stripeRemoval step. Remember to select correct stripOrientationRemove , stripSize , and stripfreqLowExclude options in the preprocessing options menu. Next the user is presented with a series of options for motion correction, image registration, and cropping.: The options highlighted in green are those that should be considered by users. Users can over their mouse over each option to get tips on what they mean. In particular, make sure that inputDatasetName is correct for HDF5 files and that fileFilterRegexp matches the form of the calcium imaging movie files to be analyzed. After this, the user is asked to let the algorithm know how many frames of the movie to analyze (defaults to all frames). Then the user is asked to select a region to use for motion correction. In general, it is best to select areas with high contrast and static markers such as blood vessels. Stay away from the edge of the movie or areas outside the brain (e.g. the edge of microendoscope GRIN lens in one-photon miniature microscope movies). Save/load preprocessing settings \u00b6 Users can also enable saving and loading of previously selected pre-processing settings by changing the red option below. Settings loaded from previous run (e.g. of modelPreprocessMovie ) or file (e.g. from viewMovieRegistrationTest runs) are highlighted in orange. Settings that user has just changed are still highlighted in green. The algorithm will then run all the requested preprocessing steps and presented the user with the option of viewing a slice of the processed file. Users have now completed pre-processing. Manual movie cropping with modelModifyMovies \u00b6 If users need to eliminate specific regions of their movie before running cell extraction, that option is provided. Users select a region using an ImageJ interface and select done when they want to move onto the next movie or start the cropping. Movies have NaNs or 0s added in the cropped region rather than changing the dimensions of the movie. Extracting cells with modelExtractSignalsFromMovie \u00b6 Users can run PCA-ICA, CNMF, CNMF-E, and ROI cell extraction by following the below set of option screens. Details on running the new Schnitzer lab cell-extraction methods will be added here after they are released. We normally estimate the number of PCs and ICs on the high end, manually sort to get an estimate of the number of cells, then run PCA-ICA again with IC 1.5-3x the number of cells and PCs 1-1.5x number of ICs. To run CNMF or CNMF-E, run loadDependencies module (e.g. obj.loadDependencies ) after calciumImagingAnalysis class is loaded. CVX (a CNMF dependency) will also be downloaded and cvx_setup run to automatically set it up. The resulting output (on Figure 45+ ) at the end should look something like: Loading cell-extraction output data with modelVarsFromFiles \u00b6 In general, after running cell-extraction ( modelExtractSignalsFromMovie ) on a dataset, run the modelVarsFromFiles module. This allows calciumImagingAnalysis to load/pre-load information about that cell-extraction run. If you had to restart MATLAB or are just loading calciumImagingAnalysis fresh but have previously run cell extraction, run this method before doing anything else with that cell-extraction data. A menu will pop-up like below when modelVarsFromFiles is loaded, you can normally just leave the defaults as is. Validating cell extraction with viewCellExtractionOnMovie \u00b6 After users have run cell extraction, they should check that cells are not being missed during the process. Running the method viewCellExtractionOnMovie will create a movie with outlines of cell extraction outputs overlaid on the movie. Below is an example, with black outlines indicating location of cell extraction outputs. If users see active cells (red flashes) that are not outlined, that indicates either exclusion or other parameters should be altered in the previous modelExtractSignalsFromMovie cell extraction step. Sorting cell extraction outputs with computeManualSortSignals \u00b6 Outputs from PCA-ICA (and most other common cell extraction algorithms like CNMF, etc.) output signal sources that are not cells and thus must be manually removed from the output. The repository contains a GUI for sorting cells from not cells. Below users can see a list of options that are given before running the code, those highlighted in green GUI usage on large imaging datasets \u00b6 To manually sort on large movies that will not fit into RAM, select the below options (highlighted in green). This will load only chunks of the movie asynchronously into the GUI as you sort cell extraction outputs. Usage \u00b6 Below are two examples of the interface and code to run if not using the calciumImagingAnalysis GUI. Usage instructions below for signalSorter.m : Main inputs inputImages - [x y N] matrix where N = number of images, x/y are dimensions. inputSignals - [N frames] double matrix where N = number of signals (traces). inputMovie - [x y frames] matrix Main outputs choices - [N 1] vector of 1 = cell, 0 = not a cell inputImagesSorted - [x y N] filtered by choices inputSignalsSorted - [N frames] filtered by choice iopts.inputMovie = inputMovie; % movie associated with traces iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [inputImagesSorted, inputSignalsSorted, choices] = signalSorter(inputImages, inputSignals, 'options',iopts); BLA one-photon imaging data signal sorting GUI \u00b6 mPFC one-photon imaging data signal sorting GUI (from example_downloadTestData.m ) \u00b6 Removing cells not within brain region with modelModifyRegionAnalysis \u00b6 If the imaging field-of-view includes cells from other brain regions, they can be removed using modelModifyRegionAnalysis Cross-session cell alignment with computeMatchObjBtwnTrials \u00b6 This step allows users to align cells across imaging sessions (e.g. those taken on different days). See the Cross session cell alignment wiki page for more details and notes on cross-session alignment. Users run computeMatchObjBtwnTrials to do cross-day alignment (first row in pictures below). Users then run viewMatchObjBtwnSessions to get a sense for how well the alignment ran. computeCellDistances and computeCrossDayDistancesAlignment allow users to compute the within session pairwise Euclidean centroid distance for all cells and the cross-session pairwise distance for all global matched cells, respectively. Users can then get the matrix that gives the session IDs % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs; View cross-session cell alignment with viewMatchObjBtwnSessions \u00b6 To evaluate how well cross-session alignment works, computeMatchObjBtwnTrials will automatically run viewMatchObjBtwnSessions at the end, but users can also run it separately after alignment. The left are raw dorsal striatum cell maps from a single animal. The right shows after cross-session alignment; color is used to indicate a global ID cell (e.g. the same cell matched across multiple days). Thus, same color cell = same cell across sessions. Save cross-session cell alignment with modelSaveMatchObjBtwnTrials \u00b6 Users can save out the alignment structure by running modelSaveMatchObjBtwnTrials . This will allow users to select a folder where calciumImagingAnalysis will save a MAT-file with the alignment structure information for each animal. ImageJ+MATLAB based mouse location tracking \u00b6 Functions needed (have entire calciumImagingAnalysis loaded anyways): mm_tracking.ijm is the tracking function for use in ImageJ, place in plugins folder. If already had calciumImagingAnalysis download Fiji, place in the _external_programs/[Fiji directory]/Fiji.app/plugins folder. removeIncorrectObjs.m is a function to clean-up the ImageJ output. createTrackingOverlayVideo is a way to check the output from the tracking by overlaying mouse tracker onto the video. Instructions for ImageJ and Matlab \u00b6 Example screen after running mm_tracking within ImageJ, click to expand. After the above screen, there will be multiple other screens culminating in one where a threshold is chosen that is used to remove non-animal pixels from analysis. The threshold matters quite a bit and the script ignores anything that isn't red (i.e. larger than threshold) OR not within the range specified by the parameters below. The script opens the AVI as a virtual stack and asks for the threshold is so that I can quickly scan through the entire movie to make sure the set threshold works even with slight/major changes in illumination, e.g. the below threshold will work across many frames If the threshold is set to low, certain frames will not have the animal detected, e.g. if the lighting changes. Once ImageJ is finished, within Matlab run the following code (cleans up the ImageJ tracking by removing small objects and adding NaNs for missing frames along with making a movie to check output). Modify to point toward paths specific for your data. % CSV file from imageJ and AVI movie path used in ImageJ moviePath = 'PATH_TO_AVI_USED_IN_IMAEJ'; csvPath = 'PATH_TO_CSV_OUTPUT_BY_IMAGEJ'; % clean up tracking [trackingTableFilteredCell] = removeIncorrectObjs(csvPath,'inputMovie',{moviePath}); % make tracking video % frames to use as example check nFrames=1500:2500; inputMovie = loadMovieList(moviePath,'frameList',nFrames); [inputTrackingVideo] = createTrackingOverlayVideo(inputMovie,movmean(trackingTableFilteredCell.XM(nFrames),5),movmean(trackingTableFilteredCell.YM(nFrames),5)); playMovie(inputTrackingVideo); Example output from 2017_09_11_p540_m381_openfield01_091112017 \u00b6 Using createTrackingOverlayVideo to verify tracking matches animal position on a per frame basis. License \u00b6 Copyright (C) 2013-2020 Biafra Ahanonu This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"One-page readme"},{"location":"alldocs/#calciumimaginganalysis","text":"Note: in general use the individual pages in the navigation pane on the left, as those will be most up-to-date. Software package for calcium imaging analysis of one- and two-photon imaging datasets. Includes a GUI to allow users to do large-scale batch analysis, accessed via the repository's calciumImagingAnalysis class. The underlying functions can also be used to create GUI-less, command line-ready analysis pipelines. Functions located in ciapkg and +ciapkg sub-folders. Includes all major calcium imaging analysis steps: pre-processing (motion correction, spatiotemporal downsampling, spatial filtering, relative fluorescence calculation, etc.), support for multiple cell-extraction methods, automated cell classification (coming soon!), cross-session cell alignment, and more. Has several example calcium imaging datasets that it will automatically download to help users test out the package. Includes code for determining animal position (e.g. in open-field assay). Supports Neurodata Without Borders data standard (see calcium imaging tutorial ) for reading/writing cell-extraction (e.g. outputs of PCA-ICA, CELLMax, CNMF, CNMF-E, etc.). Supports reading NWB movie files (write support coming soon). Requires MATLAB . Contact: Biafra Ahanonu, PhD (bahanonu [at] alum [dot] mit [dot] edu) . Made in USA.","title":"calciumImagingAnalysis"},{"location":"alldocs/#contents","text":"Quick start guide Acknowledgments References Questions Detailed README Repository notes Installation Data Processing calcium imaging data Check movie registration before pre-processing with viewMovieRegistrationTest Preprocessing calcium imaging movies with modelPreprocessMovie Manual movie cropping with modelModifyMovies Extracting cells with modelExtractSignalsFromMovie Loading cell-extraction output data with modelVarsFromFiles Validating cell extraction with viewCellExtractionOnMovie Sorting cell extraction outputs with computeManualSortSignals Removing cells not within brain region with modelModifyRegionAnalysis Cross-session cell alignment with computeMatchObjBtwnTrials ImageJ+MATLAB based mouse location tracking License","title":"Contents"},{"location":"alldocs/#quick-start-guide","text":"Below are steps needed to quickly get started using the calciumImagingAnalysis software package in MATLAB. Clone the calciumImagingAnalysis repository (using GitHub desktop or command line) or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis root folder ( NOT @calciumImagingAnalysis sub-folder in the repository). Alternatively, download the package from File Exchange using the Add-Ons explorer in MATLAB. See calciumImagingAnalysis entry at: or https://www.mathworks.com/matlabcentral/fileexchange/75466-calciumimaginganalysis . Run the below MATLAB commands. Afterwards, likely want to run modelAddNewFolders module first in order to add folders containing imaging data to the current class object. [Optional] Users on Windows systems should download Everything ( https://www.voidtools.com/ ). It is a very useful and extremely fast search engine for files and folders on a computer that can allow users to quickly get lists of folders then need to analyze in calciumImagingAnalysis . [Optional] Users who want to run analysis via the command line can run edit ciapkg.demo.cmdLinePipeline and run each segment of code there to see what commands are needed to perform each step. It assumes you have already run example_downloadTestData . % Run these commands in MATLAB to get started. % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Runs routines to check dependencies and help user get setup. obj.setup; % Open the class menu (always type `obj` then enter load the class/modules menu) obj % then hit enter, no semicolon!","title":"Quick start guide"},{"location":"alldocs/#calciumimaginganalysis-main-gui-notes","text":"All main decisions for choosing a method/procedure to run, cell-extraction algorithm, and which folders to analyze are in a single window. The GUI will real-time update the selected folders based on the selections in the subject, assay, and folder filter areas. Sections not relevant for a specific method are grayed out. Tab to cycle through selection areas. Green background is the currently selected area, dark gray background is area that had previously been selected but is not the active area, and white background is for areas that have not been selected yet. Hover mouse over method names for tooltip that gives additional information. For example, selecting middle two assays automatically changes selection in Loaded folders section. Certain sections become available when user selects the appropriate method (e.g. cell-extraction method available when selecting modelExtractSignalsFromMovie ).","title":"calciumImagingAnalysis main GUI notes"},{"location":"alldocs/#additional-quick-start-notes","text":"See additional details in Processing calcium imaging data for running the full processing pipeline. To force load all directories, including most external software packages (in _external_programs folder), type ciapkg.loadAllDirs; into MATLAB command line. This is most relevant when you need to access specific functions in an outside repository that are normally hidden until needed. When issues are encountered, first check the *Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue or email Biafra (bahanonu [at] alum.mit.edu). Notes: There are two sets of test data that are downloaded: Single session analysis : data\\2014_04_01_p203_m19_check01_raw can be used to test the pipeline until the cross-session alignment step. Batch analysis : data\\batch contains three imaging sessions that should be processed and can then be used for the cross-session alignment step. Users should try these sessions to get used to batched analysis. For Fiji dependency, when path to Miji.m (e.g. \\Fiji.app\\scripts folder) is requested, likely in calciumImagingAnalysis\\_external_programs\\FIJI_FOLDER\\Fiji.app\\scripts where FIJI_FOLDER varies depending on OS, unless the user requested a custom path or on OSX (in which case, find Fiji the install directory). If you run into Java heap space memory errors when Miji tries to load Fiji in MATLAB, make sure \"java.opts\" file is in MATLAB start-up folder or that calciumImagingAnalysis folder is the MATLAB start-up folder ( instructions on changing ). calciumImagingAnalysis often uses regular expressions to find relevant movie and other files in folders to analyze. For example, by default it looks for any movie files in a folder containing concat , e.g. concat_recording_20140401_180333.h5 (test data). If you have a file called rawData_2019_01_01_myInterestingExperiment.avi and all your raw data files start with rawData_ then change the regular expression to rawData_ when requested by the repository. See setMovieInfo module to change after adding new folders. calciumImagingAnalysis generally assumes users have imaging data associated with one imaging session and animal in a given folder. Follow folder naming conventions in Data for best experience. External software packages are downloaded into _external_programs folder and should be placed there if done manually. Users can alternatively run setup as below. % Run these commands in MATLAB to get started. % Loads all directories loadBatchFxns; % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Download and load dependent software packages into \"_external_programs\" folder. % Also download test data into \"data\" folder. % Normally only need to one once after first downloading calciumImagingAnalysis package. obj.loadDependencies; % Add folders containing imaging data. obj.modelAddNewFolders; % [optional] Set the names calciumImagingAnalysis will look for in each folder obj.setMovieInfo; % Open class menu to pick module to run. obj.runPipeline; % then hit enter!","title":"Additional quick start notes"},{"location":"alldocs/#acknowledgments","text":"Thanks to Jones G. Parker, PhD ( https://parker-laboratory.com/ ) for providing extensive user feedback during development of the calciumImagingAnalysis software package. Additional thanks to Drs. Jesse Marshall, J\u00e9r\u00f4me Lecoq, Tony H. Kim, Hakan Inan, Lacey Kitch, Maggie Larkin, Elizabeth Otto Hamel, Laurie Burns, and Claudia Schmuckermair for providing feedback, specific functions, or helping develop aspects of the code used in the calciumImagingAnalysis software package.","title":"Acknowledgments"},{"location":"alldocs/#references","text":"Please cite Corder , Ahanonu , et al. 2019 Science publication or the Ahanonu, 2018 Zenodo release if you used the software package or code from this repository to advance/help your research: @article{corderahanonu2019amygdalar, title={An amygdalar neural ensemble that encodes the unpleasantness of pain}, author={Corder, Gregory and Ahanonu, Biafra and Grewe, Benjamin F and Wang, Dong and Schnitzer, Mark J and Scherrer, Gr{\\'e}gory}, journal={Science}, volume={363}, number={6424}, pages={276--281}, year={2019}, publisher={American Association for the Advancement of Science} } @misc{biafra_ahanonu_2018_2222295, author = {Biafra Ahanonu}, title = {{calciumImagingAnalysis: a software package for analyzing one- and two-photon calcium imaging datasets.}}, month = December, year = 2018, doi = {10.5281/zenodo.2222295}, url = {https://doi.org/10.5281/zenodo.2222295} }","title":"References"},{"location":"alldocs/#questions","text":"Please email any additional questions not covered in the repository to bahanonu [at] alum.mit.edu or open an issue.","title":"Questions?"},{"location":"alldocs/#detailed-readme","text":"All the remaining sections encompass a more detailed README that provide a step-by-step instructions for running the entire analysis pipeline along with notes, tips, data organization, and other information.","title":"Detailed README"},{"location":"alldocs/#repository-notes","text":"Covers preprocessing of calcium imaging videos, cell and activity trace extraction (supports the following methods: PCA-ICA, CELLMax, EXTRACT, CNMF, CNMF-E, and ROI), manual and automated sorting of cell extraction outputs, cross-session alignment of cells, and more. Supports PCA-ICA , CNMF , CNMF-E , and ROI cell extraction methods publicly along with CELLMax and EXTRACT for Schnitzer Lab collaborators. Additional methods can be integrated upon request. Most extensively tested on Windows MATLAB 2018b and 2019a . Moderate testing on Windows MATLAB 2015b , 2017a , 2017b , and 2018b along with OSX (10.10.5) 2017b and 2018b . Individual functions and calciumImagingAnalysis class should work on other MATLAB versions after 2015b , but submit an issue if errors occur. Newer MATLAB version preferred. This repository consists of code used in and released with G. Corder , __B. Ahanonu __, B. F. Grewe, D. Wang, M. J. Schnitzer, and G. Scherrer (2019). An amygdalar neural ensemble encoding the unpleasantness of painful experiences. Science , 363, 276-281. http://science.sciencemag.org/content/363/6424/276 . and similar code helped process imaging or behavioral data in: J.G. Parker , J.D. Marshall , B. Ahanonu , Y.W. Wu, T.H. Kim, B.F. Grewe, Y. Zhang, J.Z. Li, J.B. Ding, M.D. Ehlers, and M.J. Schnitzer (2018). Diametric neural ensemble dynamics in parkinsonian and dyskinetic states. Nature , 557, 177\u2013182. https://doi.org/10.1038/s41586-018-0090-6 . Y. Li, A. Mathis, B.F. Grewe, J.A. Osterhout, B. Ahanonu, M.J. Schnitzer, V.N. Murthy, and C. Dulac (2017). Neuronal representation of social information in the medial amygdala of awake behaving mice. Cell, 171(5), 1176-1190. https://doi.org/10.1016/j.cell.2017.10.015 . Code mostly developed while in Prof. Mark Schnitzer's lab at Stanford University. Credit to those who helped in Acknowledgments . Please check the 'Wiki' for further instructions on specific processing/analysis steps and additional information of software used by this package. When issues are encountered, first check the Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue.","title":"Repository notes"},{"location":"alldocs/#installation","text":"Clone the calciumImagingAnalysis repository or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis folder. Run loadBatchFxns.m before using functions in the directory. This adds all needed directories and sub-directories to the MATLAB path. Type obj = calciumImagingAnalysis; into MATLAB command window and follow instructions that appear after to add data and run analysis. Run the calciumImagingAnalysis class method loadDependencies or type obj.loadDependencies after initializing a calciumImagingAnalysis object into the command window to download and add Fiji to path, download CNMF/CNMF-E repositories, download/setup CVX (for CNMF/CNMF-E), and download example data. Note Place calciumImagingAnalysis in a folder where MATLAB will have write permissions, as it also creates a private subdirectory to store some user information along with downloading required external software packages. file_exchange folder contains File Exchange functions used by calciumImagingAnalysis . In general, it is best to set the MATLAB startup directory to the calciumImagingAnalysis folder. This allows java.opts and startup.m to set the correct Java memory requirements and load the correct folders into the MATLAB path. If calciumImagingAnalysis IS NOT the startup folder, place java.opts wherever the MATLAB startup folder is so the correct Java memory requirements are set (important for using ImageJ/Miji in MATLAB). If it appears an old calciumImagingAnalysis repository is loaded after pulling a new version, run restoredefaultpath and check that old calciumImagingAnalysis folders are not in the MATLAB path.","title":"Installation"},{"location":"alldocs/#test-data","text":"To download test data, run loadDependencies module (e.g. obj.loadDependencies ) and select Download test one-photon data. option to download example one-photon miniature microscope test data to use for testing calciumImagingAnalysis preprocessing, cell extraction, and cell classification code. The data will be located in the data folder within the repository root directory. Else run example_downloadTestData.m if haven't started an instance of calciumImagingAnalysis.","title":"Test data"},{"location":"alldocs/#dependencies","text":"By default external MATLAB-based software packages are stored in _external_programs .","title":"Dependencies"},{"location":"alldocs/#matlab-toolbox-dependencies","text":"Primary toolboxes distrib_computing_toolbox image_toolbox signal_toolbox statistics_toolbox Secondary toolboxes (not required for main pre-processing pipeline) video_and_image_blockset bioinformatics_toolbox financial_toolbox neural_network_toolbox","title":"MATLAB Toolbox dependencies"},{"location":"alldocs/#parallel-computing-toolbox-pct","text":"By default both calciumImagingAnalysis and PCT auto-start a parallel pool for functions that use parallelization (e.g. or calls to parfor ). For some users this may not be desired, in that case go to MATLAB preferences and uncheck the below. Or enter the following commands into the MATLAB command window: parSet = parallel.Settings; parSet.Pool.AutoCreate = false;","title":"Parallel Computing Toolbox (PCT)"},{"location":"alldocs/#imagej","text":"Run downloadMiji from downloads\\downloadMiji.m or obj.loadDependencies (when class initialized) to download Fiji version appropriate to your platform. Else download Fiji (preferably 2015 December 22 version): https://imagej.net/Fiji/Downloads . Make sure have Miji in Fiji installation: http://bigwww.epfl.ch/sage/soft/mij/ . This is used as an alternative to the calciumImagingAnalysis playMovie.m function for viewing movies and is needed for some movie modification steps.","title":"ImageJ"},{"location":"alldocs/#saleae","text":"Only download if doing behavior and imaging experiments that use this DAQ device to collect data. Download 1.2.26: https://support.saleae.com/logic-software/legacy-software/older-software-releases#1-2-26-download .","title":"Saleae"},{"location":"alldocs/#cnmf-and-cnmf-e","text":"Download repositories by running downloadCnmfGithubRepositories.m or obj.loadDependencies (when class is initialized). CNMF: https://github.com/flatironinstitute/CaImAn-MATLAB . CNMF-E: https://github.com/bahanonu/CNMF_E forked from https://github.com/zhoupc/CNMF_E to fix HDF5, movies with NaNs, and other related compatibility issues. CVX: http://cvxr.com/cvx/download/ . Download All platforms ( Redistributable: free solvers only ), e.g. http://web.cvxr.com/cvx/cvx-rd.zip .","title":"CNMF and CNMF-E"},{"location":"alldocs/#neurodata-without-borders","text":"Neurodata Without Borders (NWB) file support requires the following GitHub repositories be present in the _external_programs folder. These are downloaded automatically when running obj.setup . https://github.com/schnitzer-lab/nwb_schnitzer_lab . https://github.com/ewiger/yamlmatlab . https://github.com/NeurodataWithoutBorders/matnwb .","title":"Neurodata Without Borders"},{"location":"alldocs/#repository-organization","text":"Below are a list of the top-level directories and what types of functions or files are within. @calciumImagingAnalysis - Contains calciumImagingAnalysis class and associated methods for calcium imaging analysis. external programs _ - External software packages (e.g. CNMF, CELLMax, and others) are stored here. overloaded - Functions that overload core MATLAB functions to add functionality or fix display issues. behavior - Processing of behavior files (e.g. accelerometer data, Saleae files, etc.). classification - Classification of cells, e.g. manual classification of cell extraction outputs or cross-session grouping of cells. data - Location of test data. download - Functions that help download external code packages or data. file_exchange - Contains any outside code from MATLAB's File Exchange that are dependencies in repository functions. hdf5 - Functions concerned with HDF5 input/output. image - Functions concerned with processing images (or [x y] matrices). inscopix - Functions concerned with Inscopix-specific data processing (e.g. using the ISX MATLAB API). io - Contains functions concerned with file or function input-output. motion_correction - Functions concerned with motion correction. movie_processing - Functions concerned with preprocessing calcium imaging videos, e.g. spatial filtering, downsampling, etc. neighbor - Detection and display of neighboring cell information. private - This directory contains various user settings, output pictures/data/logs from calciumImagingAnalysis modules, and more. This directory is NOT included in the MATLAB path, hence is good for storing related scripts without interfering with calciumImagingAnalysis . python - Python code, e.g. for processing Saleae data. serial - Code for saving and processing serial port data, e.g. Arduino streaming data. settings - Functions concerned with settings for other functions. signal_extraction - Functions related to cell extraction, e.g. running PCA-ICA. signal_processing - Functions to process cell activity traces. tracking - ImageJ and MATLAB functions to track animal location in behavior movies. unit_tests [optional] - Functions to validate specific repository functions. video - Functions to manipulate or process videos, e.g. making movie montages or adding dropped frames. view - Functions concerned with displaying data or information to the user, normally do not process data.","title":"Repository organization"},{"location":"alldocs/#data","text":"The class generally operates on the principal that a single imaging session is contained within a single folder or directory. Thus, even if a single imaging session contains multiple trials (e.g. the imaging data is split across multiple movies) this is fine as the class will concatenate them during the preprocessing step. The naming convention in general is below. Both TIF and AVI raw files are converted to HDF5 after processing since that format offers more flexibility during cell extraction and other steps.","title":"Data"},{"location":"alldocs/#input-and-output-files","text":"Default raw imaging data filename: concat_.*.(h5|tif) . Default raw processed data filename: folderName_(processing steps).h5 , where folderName is the directory name where the calcium imaging movies are located. Main files output by calciumImagingAnalysis . Below, .* normally indicates the folder name prefixed to the filename. .*_pcaicaAnalysis.mat : Where PCA-ICA outputs are stored. .*_ICdecisions_.*.mat : Where decisions for cell (=1) and not cell (=0) are stored in a valid variable. .*_regionModSelectUser.mat : A mask of the region (=1) to include in further analyses. .*_turboreg_crop_dfof_1.h5 : Processed movie, in this case motion corrected, cropped, and \u0394_F/F_. processing_info : a folder containing preprocessing information.","title":"Input and output files"},{"location":"alldocs/#nwb-support","text":"calciumImagingAnalysis supports NWB format and by default will output cell-extraction analysis as calciumImagingAnalysis format unless user specifies otherwise. NWB files are by default stored in the nwbFiles sub-folder. This can be changed by setting the obj.nwbFileFolder property to a different folder name. Default image mask HDF5 dataset name: '/processing/ophys/ImageSegmentation/PlaneSegmentation'. Default fluorescence activity HDF5 dataset name: '/processing/ophys/Fluorescence/RoiResponseSeries'.","title":"NWB Support"},{"location":"alldocs/#preferred-folder-naming-format","text":"Folders should following the format YYYY_MM_DD_pXXX_mXXX_assayXX_trialXX where: YYYY_MM_DD = normal year/month/day scheme. pXXX = protocol number, e.g. p162, for the set of experiments performed for the same set of animals. mXXX = subject ID/number, e.g. m805 or animal ID. assayXX = assay ID and session number, e.g. vonfrey01 is the 1st von Frey assay session. trialXX = the trial number of the current assay session, only applicable if multiple trials in the same assay session.","title":"Preferred folder naming format"},{"location":"alldocs/#videos","text":"HDF5: Saved as a [x y t] 3D matrix where x and y are the height and width of video while t is number of frames. /1 as the name for directory containing movie data. HDF can be read in using Fiji, see http://lmb.informatik.uni-freiburg.de/resources/opensource/imagej_plugins/hdf5.html . Each HDF5 file should contain imaging data in a dataset name, e.g. /1 is the default datasetname for [x y frames] 2D calcium imaging movies in this repository. Most functions have a inputDatasetName option to specify the dataset name if different from /1 . TIF Normal [x y frames] tif. AVI Raw uncompressed grayscale [x y frames] avi.","title":"Videos"},{"location":"alldocs/#cell-images","text":"IC filters from PCA-ICA and images from CNMF(-E). [x y n] matrix x and y being height/width of video and n is number of ICs output.","title":"Cell images"},{"location":"alldocs/#cell-traces","text":"IC traces from PCA-ICA and images from CNMF(-E). [n f] matrix. n is number of ICs output and f is number of movie frames.","title":"Cell traces"},{"location":"alldocs/#processing-calcium-imaging-data","text":"The general pipeline for processing calcium imaging data is below. This repository includes code to do nearly every step. To start using the calciumImagingAnalysis software package, enter the following into the MATLAB command window. % Loads all directories loadBatchFxns; % Loads the class into an object. obj = calciumImagingAnalysis; % Open the class menu obj % then hit enter, no semicolon! % Alternatively obj.runPipeline; % then hit enter! The general order of functions that users should run is ([optional] are those not critical for most datasets): loadDependencies If user is running calciumImagingAnalysis for the first time, this module has several options to download and load CNMF/CNMF-E code for cell extraction, Fiji for viewing/modifying videos (using Miji), and test data from a miniature microscope experiment. modelDownsampleRawMovies [optional] If users have raw calcium imaging data that needs to be spatially downsampled, e.g. raw data from Inscopix nVista software. modelAddNewFolders Users should always use this method first, used to add folders to the current class object. For example, if users ran example_downloadTestData.m , then add the folder [githubRepoPath]\\data\\2014_04_01_p203_m19_check01_raw where githubRepoPath is the absolute path to the current calciumImagingAnalysis repository. viewMovie Users should check that calciumImagingAnalysis loads their movies correctly and that Miji is working. Remember to check that Imaging movie regexp: (regular expression class uses to find user movies within given folders) setting matches name of movies currently in repository. viewMovieRegistrationTest [optional] Users can check different spatial filtering and registration settings. tregRunX folders (where X is a number) contain details of each run setting. Delete from analysis folder if don't need outputs later. Remember to adjust contrast in resulting montage movies since different filtering will change the absolute pixel values. modelPreprocessMovie Main processing method for calciumImagingAnalysis. Performs motion correction, spatial filtering, cropping, down-sampling, and relative fluorescence calculations. If using Inscopix nVista 1.0 or 2.0, also will correct for dropped frames. modelModifyMovies GUI that allows users to remove movie regions not relevant to cell extraction. modelExtractSignalsFromMovie Performs cell extraction, currently PCA-ICA with the ability to run more recent algorithms (e.g. CNMF) upon request. modelVarsFromFiles Run after modelExtractSignalsFromMovie to load cell image and trace information into the current class object. viewCellExtractionOnMovie [optional] This function overlays the cell extraction outputs on snippets of the processed video, allowing users to check that cell extraction correctly identified all the cells. computeManualSortSignals A GUI to allow users to classify cells and not cells in cell extraction outputs. modelModifyRegionAnalysis [optional] Users are able to select specific cells from cell extraction manual sorting to include in further analyses. computeMatchObjBtwnTrials Method to register cells across imaging sessions. Also includes visual check GUI in viewMatchObjBtwnSessions method. Note: it is heavily advised that throughout a particular animal's imaging sessions, that you keep the acquisition frame dimensions identical. This makes cross-session registration easier. Else you will have to crop all sessions for that animal to the same size ensuring that the area of interest is present in each.","title":"Processing calcium imaging data"},{"location":"alldocs/#spatially-downsample-raw-movies-or-convert-to-hdf5-with-modeldownsamplerawmovies","text":"Users have the ability to spatially downsample raw movies, often necessary to denoise the data, save storage space, and improve runtimes of later processing steps. For most data, users can downsample 2 or 4 times in each spatial dimension while still retaining sufficient pixels per cell to facilitate cell-extraction. To run, either select modelDownsampleRawMovies in the GUI menu or type the below command after initializing a calciumImagingAnalysis obj. obj.modelDownsampleRawMovies; This will pop-up the following screen. Users can input several folders where ISXD files are by separating each folder path with a comma ( Folder(s) where raw HDF5s are located ), specify a common root folder to save files to ( Folder to save downsampled HDF5s to: ), and input a root directory that contains the sub-folders with the raw data ( Decompression source root folder(s) ). The function will automatically put each file in its corresponding folder, make sure folder names are unique (this should be done anyways for data analysis reasons).","title":"Spatially downsample raw movies or convert to HDF5 with modelDownsampleRawMovies"},{"location":"alldocs/#converting-inscopix-isxd-files-to-hdf5","text":"To convert from Inscopix ISXD file format (output by nVista v3+ and nVoke) to HDF5 run modelDownsampleRawMovies without changing the regular expression or make sure it looks for .*.isxd or similar. Users will need the latest version of the Inscopix Data Processing Software as these functions take advantage of their API. If calciumImagingAnalysis cannot automatically find the API, it will ask the user to direct it to the root location of the Inscopix Data Processing Software (see below).","title":"Converting Inscopix ISXD files to HDF5"},{"location":"alldocs/#check-movie-registration-before-pre-processing-with-viewmovieregistrationtest","text":"Users should spatially filter one-photon or other data with background noise (e.g. neuropil). To get a feel for how the different spatial filtering affects SNR/movie data before running the full processing pipeline, run viewMovieRegistrationTest module. Then select either matlab divide by lowpass before registering or matlab bandpass before registering then change filterBeforeRegFreqLow and filterBeforeRegFreqHigh settings, see below. Within each folder will be a sub-folder called preprocRunTest inside of which is a series of sub-folders called preprocRun## that will contain a file called settings.mat that can be loaded into modelPreprocessMovie so the same settings that worked during the test can be used during the actual pre-processing run. You'll get an output like the below: A : The top left is without any filtering while the other 3 are with different bandpass filtering options. B : Cell \u0394F/F intensity profile from the raw movie. Obtain by selecting Analyze->Plot profile from Fiji menu after selecting a square segment running through a cell. C : Same cell \u0394F/F intensity profile from the bottom/left movie (note the y-axis is the same as above). Obtained in same manner as B .","title":"Check movie registration before pre-processing with viewMovieRegistrationTest"},{"location":"alldocs/#preprocessing-calcium-imaging-movies-with-modelpreprocessmovie","text":"After users instantiate an object of the calciumImagingAnalysis class and enter a folder, they can start preprocessing of their calcium imaging data with modelPreprocessMovie . See below for a series of windows to get started, the options for motion correction, cropping unneeded regions, \u0394_F/F_, and temporal downsampling were selected for use in the study associated with this repository. If users have not specified the path to Miji, a window appears asking them to select the path to Miji's scripts folder. If users are using the test dataset, it is recommended that they do not use temporal downsampling. Vertical and horizontal stripes in movies (e.g. CMOS camera artifacts) can be removed via stripeRemoval step. Remember to select correct stripOrientationRemove , stripSize , and stripfreqLowExclude options in the preprocessing options menu. Next the user is presented with a series of options for motion correction, image registration, and cropping.: The options highlighted in green are those that should be considered by users. Users can over their mouse over each option to get tips on what they mean. In particular, make sure that inputDatasetName is correct for HDF5 files and that fileFilterRegexp matches the form of the calcium imaging movie files to be analyzed. After this, the user is asked to let the algorithm know how many frames of the movie to analyze (defaults to all frames). Then the user is asked to select a region to use for motion correction. In general, it is best to select areas with high contrast and static markers such as blood vessels. Stay away from the edge of the movie or areas outside the brain (e.g. the edge of microendoscope GRIN lens in one-photon miniature microscope movies).","title":"Preprocessing calcium imaging movies with modelPreprocessMovie"},{"location":"alldocs/#saveload-preprocessing-settings","text":"Users can also enable saving and loading of previously selected pre-processing settings by changing the red option below. Settings loaded from previous run (e.g. of modelPreprocessMovie ) or file (e.g. from viewMovieRegistrationTest runs) are highlighted in orange. Settings that user has just changed are still highlighted in green. The algorithm will then run all the requested preprocessing steps and presented the user with the option of viewing a slice of the processed file. Users have now completed pre-processing.","title":"Save/load preprocessing settings"},{"location":"alldocs/#manual-movie-cropping-with-modelmodifymovies","text":"If users need to eliminate specific regions of their movie before running cell extraction, that option is provided. Users select a region using an ImageJ interface and select done when they want to move onto the next movie or start the cropping. Movies have NaNs or 0s added in the cropped region rather than changing the dimensions of the movie.","title":"Manual movie cropping with modelModifyMovies"},{"location":"alldocs/#extracting-cells-with-modelextractsignalsfrommovie","text":"Users can run PCA-ICA, CNMF, CNMF-E, and ROI cell extraction by following the below set of option screens. Details on running the new Schnitzer lab cell-extraction methods will be added here after they are released. We normally estimate the number of PCs and ICs on the high end, manually sort to get an estimate of the number of cells, then run PCA-ICA again with IC 1.5-3x the number of cells and PCs 1-1.5x number of ICs. To run CNMF or CNMF-E, run loadDependencies module (e.g. obj.loadDependencies ) after calciumImagingAnalysis class is loaded. CVX (a CNMF dependency) will also be downloaded and cvx_setup run to automatically set it up. The resulting output (on Figure 45+ ) at the end should look something like:","title":"Extracting cells with modelExtractSignalsFromMovie"},{"location":"alldocs/#loading-cell-extraction-output-data-with-modelvarsfromfiles","text":"In general, after running cell-extraction ( modelExtractSignalsFromMovie ) on a dataset, run the modelVarsFromFiles module. This allows calciumImagingAnalysis to load/pre-load information about that cell-extraction run. If you had to restart MATLAB or are just loading calciumImagingAnalysis fresh but have previously run cell extraction, run this method before doing anything else with that cell-extraction data. A menu will pop-up like below when modelVarsFromFiles is loaded, you can normally just leave the defaults as is.","title":"Loading cell-extraction output data with modelVarsFromFiles"},{"location":"alldocs/#validating-cell-extraction-with-viewcellextractiononmovie","text":"After users have run cell extraction, they should check that cells are not being missed during the process. Running the method viewCellExtractionOnMovie will create a movie with outlines of cell extraction outputs overlaid on the movie. Below is an example, with black outlines indicating location of cell extraction outputs. If users see active cells (red flashes) that are not outlined, that indicates either exclusion or other parameters should be altered in the previous modelExtractSignalsFromMovie cell extraction step.","title":"Validating cell extraction with viewCellExtractionOnMovie"},{"location":"alldocs/#sorting-cell-extraction-outputs-with-computemanualsortsignals","text":"Outputs from PCA-ICA (and most other common cell extraction algorithms like CNMF, etc.) output signal sources that are not cells and thus must be manually removed from the output. The repository contains a GUI for sorting cells from not cells. Below users can see a list of options that are given before running the code, those highlighted in green","title":"Sorting cell extraction outputs with computeManualSortSignals"},{"location":"alldocs/#gui-usage-on-large-imaging-datasets","text":"To manually sort on large movies that will not fit into RAM, select the below options (highlighted in green). This will load only chunks of the movie asynchronously into the GUI as you sort cell extraction outputs.","title":"GUI usage on large imaging datasets"},{"location":"alldocs/#usage","text":"Below are two examples of the interface and code to run if not using the calciumImagingAnalysis GUI. Usage instructions below for signalSorter.m : Main inputs inputImages - [x y N] matrix where N = number of images, x/y are dimensions. inputSignals - [N frames] double matrix where N = number of signals (traces). inputMovie - [x y frames] matrix Main outputs choices - [N 1] vector of 1 = cell, 0 = not a cell inputImagesSorted - [x y N] filtered by choices inputSignalsSorted - [N frames] filtered by choice iopts.inputMovie = inputMovie; % movie associated with traces iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [inputImagesSorted, inputSignalsSorted, choices] = signalSorter(inputImages, inputSignals, 'options',iopts);","title":"Usage"},{"location":"alldocs/#bla-one-photon-imaging-data-signal-sorting-gui","text":"","title":"BLA one-photon imaging data signal sorting GUI"},{"location":"alldocs/#mpfc-one-photon-imaging-data-signal-sorting-gui-from-example_downloadtestdatam","text":"","title":"mPFC one-photon imaging data signal sorting GUI (from example_downloadTestData.m)"},{"location":"alldocs/#removing-cells-not-within-brain-region-with-modelmodifyregionanalysis","text":"If the imaging field-of-view includes cells from other brain regions, they can be removed using modelModifyRegionAnalysis","title":"Removing cells not within brain region with modelModifyRegionAnalysis"},{"location":"alldocs/#cross-session-cell-alignment-with-computematchobjbtwntrials","text":"This step allows users to align cells across imaging sessions (e.g. those taken on different days). See the Cross session cell alignment wiki page for more details and notes on cross-session alignment. Users run computeMatchObjBtwnTrials to do cross-day alignment (first row in pictures below). Users then run viewMatchObjBtwnSessions to get a sense for how well the alignment ran. computeCellDistances and computeCrossDayDistancesAlignment allow users to compute the within session pairwise Euclidean centroid distance for all cells and the cross-session pairwise distance for all global matched cells, respectively. Users can then get the matrix that gives the session IDs % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs;","title":"Cross-session cell alignment with computeMatchObjBtwnTrials"},{"location":"alldocs/#view-cross-session-cell-alignment-with-viewmatchobjbtwnsessions","text":"To evaluate how well cross-session alignment works, computeMatchObjBtwnTrials will automatically run viewMatchObjBtwnSessions at the end, but users can also run it separately after alignment. The left are raw dorsal striatum cell maps from a single animal. The right shows after cross-session alignment; color is used to indicate a global ID cell (e.g. the same cell matched across multiple days). Thus, same color cell = same cell across sessions.","title":"View cross-session cell alignment with viewMatchObjBtwnSessions"},{"location":"alldocs/#save-cross-session-cell-alignment-with-modelsavematchobjbtwntrials","text":"Users can save out the alignment structure by running modelSaveMatchObjBtwnTrials . This will allow users to select a folder where calciumImagingAnalysis will save a MAT-file with the alignment structure information for each animal.","title":"Save cross-session cell alignment with modelSaveMatchObjBtwnTrials"},{"location":"alldocs/#imagejmatlab-based-mouse-location-tracking","text":"Functions needed (have entire calciumImagingAnalysis loaded anyways): mm_tracking.ijm is the tracking function for use in ImageJ, place in plugins folder. If already had calciumImagingAnalysis download Fiji, place in the _external_programs/[Fiji directory]/Fiji.app/plugins folder. removeIncorrectObjs.m is a function to clean-up the ImageJ output. createTrackingOverlayVideo is a way to check the output from the tracking by overlaying mouse tracker onto the video.","title":"ImageJ+MATLAB based mouse location tracking"},{"location":"alldocs/#instructions-for-imagej-and-matlab","text":"Example screen after running mm_tracking within ImageJ, click to expand. After the above screen, there will be multiple other screens culminating in one where a threshold is chosen that is used to remove non-animal pixels from analysis. The threshold matters quite a bit and the script ignores anything that isn't red (i.e. larger than threshold) OR not within the range specified by the parameters below. The script opens the AVI as a virtual stack and asks for the threshold is so that I can quickly scan through the entire movie to make sure the set threshold works even with slight/major changes in illumination, e.g. the below threshold will work across many frames If the threshold is set to low, certain frames will not have the animal detected, e.g. if the lighting changes. Once ImageJ is finished, within Matlab run the following code (cleans up the ImageJ tracking by removing small objects and adding NaNs for missing frames along with making a movie to check output). Modify to point toward paths specific for your data. % CSV file from imageJ and AVI movie path used in ImageJ moviePath = 'PATH_TO_AVI_USED_IN_IMAEJ'; csvPath = 'PATH_TO_CSV_OUTPUT_BY_IMAGEJ'; % clean up tracking [trackingTableFilteredCell] = removeIncorrectObjs(csvPath,'inputMovie',{moviePath}); % make tracking video % frames to use as example check nFrames=1500:2500; inputMovie = loadMovieList(moviePath,'frameList',nFrames); [inputTrackingVideo] = createTrackingOverlayVideo(inputMovie,movmean(trackingTableFilteredCell.XM(nFrames),5),movmean(trackingTableFilteredCell.YM(nFrames),5)); playMovie(inputTrackingVideo);","title":"Instructions for ImageJ and Matlab"},{"location":"alldocs/#example-output-from-2017_09_11_p540_m381_openfield01_091112017","text":"Using createTrackingOverlayVideo to verify tracking matches animal position on a per frame basis.","title":"Example output from 2017_09_11_p540_m381_openfield01_091112017"},{"location":"alldocs/#license","text":"Copyright (C) 2013-2020 Biafra Ahanonu This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"api_ciapkg/","text":"CIAPKG useful functions. \u00b6 CIAPKG contains many useful functions for imaging analysis. Several are detailed below. For each users can visualize options with help FUN or edit FUN . If attempting to load a non-package function (e.g. it does not start with ciapkg ), then append ciapkg.all. , e.g. playMovie would become ciapkg.all.playMovie . Alternatively, load all the functions into the workspace with import ciapkg.all.* . Visualizing movies \u00b6 playMovie ciapkg.io.loadMovie or loadMovieList createImageOutlineOnMovie createSignalBasedMovie ciapkg.io.readFrame Get movie information \u00b6 ciapkg.io.getMovieInfo Sorting cells \u00b6 signalSorter Pre-processing \u00b6 ciapkg.demo.runPreprocessing downsampleHdf5Movie removeStripsFromMovie turboregMovie dfofMovie downsampleMovie normalizeMovie ciapkg.signal_extraction.runPcaIca Cross-session alignment \u00b6 matchObjBtwnTrials createMatchObjBtwnTrialsMaps","title":"ciapkg"},{"location":"api_ciapkg/#ciapkg-useful-functions","text":"CIAPKG contains many useful functions for imaging analysis. Several are detailed below. For each users can visualize options with help FUN or edit FUN . If attempting to load a non-package function (e.g. it does not start with ciapkg ), then append ciapkg.all. , e.g. playMovie would become ciapkg.all.playMovie . Alternatively, load all the functions into the workspace with import ciapkg.all.* .","title":"CIAPKG useful functions."},{"location":"api_ciapkg/#visualizing-movies","text":"playMovie ciapkg.io.loadMovie or loadMovieList createImageOutlineOnMovie createSignalBasedMovie ciapkg.io.readFrame","title":"Visualizing movies"},{"location":"api_ciapkg/#get-movie-information","text":"ciapkg.io.getMovieInfo","title":"Get movie information"},{"location":"api_ciapkg/#sorting-cells","text":"signalSorter","title":"Sorting cells"},{"location":"api_ciapkg/#pre-processing","text":"ciapkg.demo.runPreprocessing downsampleHdf5Movie removeStripsFromMovie turboregMovie dfofMovie downsampleMovie normalizeMovie ciapkg.signal_extraction.runPcaIca","title":"Pre-processing"},{"location":"api_ciapkg/#cross-session-alignment","text":"matchObjBtwnTrials createMatchObjBtwnTrialsMaps","title":"Cross-session alignment"},{"location":"api_example_pipeline/","text":"Example calciumImagingAnalysis pipeline via the command line. \u00b6 Below is an example cacliumImagingAnalysis pipeline using the command line for those that do not want to use the class or want to create their own custom batch analyses. It assumes you have already run example_downloadTestData to download the example test data. Can also access the pipeline by typing edit ciapkg.demo.cmdLinePipeline into the command line or run by typing in ciapkg.demo.cmdLinePipeline; ; % Running calciumImagingAnalysis command line %% Load movie to analyze inputMovie = loadMovieList([ciapkg.getDir() filesep 'data' filesep '2014_04_01_p203_m19_check01' filesep 'concat_recording_20140401_180333.h5']); %% Visualize slice of the movie playMovie(inputMovie(:,:,1:500)); % Alternatively, visualize by entering the file path playMovie(inputMoviePath); %% Downsample input movie if need to inputMovieD = downsampleMovie(inputMovie,'downsampleDimension','space','downsampleFactor',4); playMovie(inputMovie,'extraMovie',inputMovieD); % Alternatively, if you have Inscopix ISXD files, downsample by reading segments from disk using. moviePath = 'PATH_TO_ISXD'; opts.maxChunkSize = 5000; % Max chunk size in Mb to load into RAM. opts.downsampleFactor = 4; % How much to downsample original movie, set to 1 for no downsampling. convertInscopixIsxdToHdf5(moviePath,'options',opts); %% Remove stripes from movie if needed % Show full filter sequence for one frame sopts.stripOrientation = 'both'; sopts.meanFilterSize = 1; sopts.freqLowExclude = 10; sopts.bandpassType = 'highpass'; removeStripsFromMovie(inputMovie(:,:,1),'options',sopts,'showImages',1); % Run on the entire movie removeStripsFromMovie(inputMovie,'options',sopts); %% Get coordinates to crop [cropCoords] = getCropCoords(squeeze(inputMovie(:,:,1))); toptions.cropCoords = cropCoords; %% Motion correction % Or have turboreg run manual correction toptions.cropCoords = 'manual'; toptions.turboregRotation = 0; toptions.removeEdges = 1; toptions.pxToCrop = 10; % Pre-motion correction toptions.complementMatrix = 1; toptions.meanSubtract = 1; toptions.meanSubtractNormalize = 1; toptions.normalizeType = 'matlabDisk'; % Spatial filter toptions.normalizeBeforeRegister = 'divideByLowpass'; toptions.freqLow = 0; toptions.freqHigh = 7; [inputMovie2, ~] = turboregMovie(inputMovie,'options',toptions); %% Compare raw and motion corrected movies playMovie(inputMovie,'extraMovie',inputMovie2); %% Run dF/F inputMovie3 = dfofMovie(single(inputMovie2),'dfofType','dfof'); %% Run temporal downsampling inputMovie3 = downsampleMovie(inputMovie3,'downsampleDimension','time','downsampleFactor',4); %% Final check of movie before cell extraction playMovie(inputMovie3); %% Run PCA-ICA cell extraction. CNMF-e, CNMF, ROI, and other cell-extraction algorithms are also available. nPCs = 300; nICs = 225; [PcaOutputSpatial, PcaOutputTemporal, PcaOutputSingularValues, PcaInfo] = run_pca(inputMovie3, nPCs, 'movie_dataset_name','/1'); [IcaFilters, IcaTraces, IcaInfo] = run_ica(PcaOutputSpatial, PcaOutputTemporal, PcaOutputSingularValues, size(inputMovie3,1), size(inputMovie3,2), nICs, 'output_units','fl','mu',0.1,'term_tol',5e-6,'max_iter',1e3); IcaTraces = permute(IcaTraces,[2 1]); %% Save outputs to NWB format saveNeurodataWithoutBorders(IcaFilters,{IcaTraces},'pcaica','pcaica.nwb'); %% Run signal sorting using matrix inputs [outImages, outSignals, choices] = signalSorter(IcaFilters,IcaTraces,'inputMovie',inputMovie3); %% Run signal sorting using NWB [outImages, outSignals, choices] = signalSorter('pcaica.nwb',[],'inputMovie',inputMovie3); %% Plot results of sorting figure; subplot(1,2,1);imagesc(max(IcaFilters,[],3));axis equal tight; title('Raw filters') subplot(1,2,2);imagesc(max(outImages,[],3));axis equal tight; title('Sorted filters') %% Create an overlay of extraction outputs on the movie and signal-based movie [inputMovieO] = createImageOutlineOnMovie(inputMovie3,IcaFilters,'dilateOutlinesFactor',0); [signalMovie] = createSignalBasedMovie(IcaTraces,IcaFilters,'signalType','peak'); %% Play all three movies % Normalize all the movies movieM = cellfun(@(x) normalizeVector(x,'normRange','zeroToOne'),{inputMovie3,inputMovieO,signalMovie},'UniformOutput',false); playMovie(cat(2,movieM{:})); %% Run cross-session alignment of cells % Create input images, cell array of [x y nCells] matrices inputImages = {day1Images,day2Images,day3Images}; % options to change opts.maxDistance = 5; % distance in pixels between centroids for them to be grouped opts.trialToAlign = 1; % which session to start alignment on opts.nCorrections = 1; %number of rounds to register session cell maps. opts.RegisTypeFinal = 2 % 3 = rotation/translation and iso scaling; 2 = rotation/translation, no iso scaling % Run alignment code [alignmentStruct] = matchObjBtwnTrials(inputImages,'options',opts); % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs; % View the cross-session matched cells, saved to `private\\_tmpFiles` sub-folder. [success] = createMatchObjBtwnTrialsMaps(inputImages,alignmentStruct);","title":"Custom pipelines"},{"location":"api_example_pipeline/#example-calciumimaginganalysis-pipeline-via-the-command-line","text":"Below is an example cacliumImagingAnalysis pipeline using the command line for those that do not want to use the class or want to create their own custom batch analyses. It assumes you have already run example_downloadTestData to download the example test data. Can also access the pipeline by typing edit ciapkg.demo.cmdLinePipeline into the command line or run by typing in ciapkg.demo.cmdLinePipeline; ; % Running calciumImagingAnalysis command line %% Load movie to analyze inputMovie = loadMovieList([ciapkg.getDir() filesep 'data' filesep '2014_04_01_p203_m19_check01' filesep 'concat_recording_20140401_180333.h5']); %% Visualize slice of the movie playMovie(inputMovie(:,:,1:500)); % Alternatively, visualize by entering the file path playMovie(inputMoviePath); %% Downsample input movie if need to inputMovieD = downsampleMovie(inputMovie,'downsampleDimension','space','downsampleFactor',4); playMovie(inputMovie,'extraMovie',inputMovieD); % Alternatively, if you have Inscopix ISXD files, downsample by reading segments from disk using. moviePath = 'PATH_TO_ISXD'; opts.maxChunkSize = 5000; % Max chunk size in Mb to load into RAM. opts.downsampleFactor = 4; % How much to downsample original movie, set to 1 for no downsampling. convertInscopixIsxdToHdf5(moviePath,'options',opts); %% Remove stripes from movie if needed % Show full filter sequence for one frame sopts.stripOrientation = 'both'; sopts.meanFilterSize = 1; sopts.freqLowExclude = 10; sopts.bandpassType = 'highpass'; removeStripsFromMovie(inputMovie(:,:,1),'options',sopts,'showImages',1); % Run on the entire movie removeStripsFromMovie(inputMovie,'options',sopts); %% Get coordinates to crop [cropCoords] = getCropCoords(squeeze(inputMovie(:,:,1))); toptions.cropCoords = cropCoords; %% Motion correction % Or have turboreg run manual correction toptions.cropCoords = 'manual'; toptions.turboregRotation = 0; toptions.removeEdges = 1; toptions.pxToCrop = 10; % Pre-motion correction toptions.complementMatrix = 1; toptions.meanSubtract = 1; toptions.meanSubtractNormalize = 1; toptions.normalizeType = 'matlabDisk'; % Spatial filter toptions.normalizeBeforeRegister = 'divideByLowpass'; toptions.freqLow = 0; toptions.freqHigh = 7; [inputMovie2, ~] = turboregMovie(inputMovie,'options',toptions); %% Compare raw and motion corrected movies playMovie(inputMovie,'extraMovie',inputMovie2); %% Run dF/F inputMovie3 = dfofMovie(single(inputMovie2),'dfofType','dfof'); %% Run temporal downsampling inputMovie3 = downsampleMovie(inputMovie3,'downsampleDimension','time','downsampleFactor',4); %% Final check of movie before cell extraction playMovie(inputMovie3); %% Run PCA-ICA cell extraction. CNMF-e, CNMF, ROI, and other cell-extraction algorithms are also available. nPCs = 300; nICs = 225; [PcaOutputSpatial, PcaOutputTemporal, PcaOutputSingularValues, PcaInfo] = run_pca(inputMovie3, nPCs, 'movie_dataset_name','/1'); [IcaFilters, IcaTraces, IcaInfo] = run_ica(PcaOutputSpatial, PcaOutputTemporal, PcaOutputSingularValues, size(inputMovie3,1), size(inputMovie3,2), nICs, 'output_units','fl','mu',0.1,'term_tol',5e-6,'max_iter',1e3); IcaTraces = permute(IcaTraces,[2 1]); %% Save outputs to NWB format saveNeurodataWithoutBorders(IcaFilters,{IcaTraces},'pcaica','pcaica.nwb'); %% Run signal sorting using matrix inputs [outImages, outSignals, choices] = signalSorter(IcaFilters,IcaTraces,'inputMovie',inputMovie3); %% Run signal sorting using NWB [outImages, outSignals, choices] = signalSorter('pcaica.nwb',[],'inputMovie',inputMovie3); %% Plot results of sorting figure; subplot(1,2,1);imagesc(max(IcaFilters,[],3));axis equal tight; title('Raw filters') subplot(1,2,2);imagesc(max(outImages,[],3));axis equal tight; title('Sorted filters') %% Create an overlay of extraction outputs on the movie and signal-based movie [inputMovieO] = createImageOutlineOnMovie(inputMovie3,IcaFilters,'dilateOutlinesFactor',0); [signalMovie] = createSignalBasedMovie(IcaTraces,IcaFilters,'signalType','peak'); %% Play all three movies % Normalize all the movies movieM = cellfun(@(x) normalizeVector(x,'normRange','zeroToOne'),{inputMovie3,inputMovieO,signalMovie},'UniformOutput',false); playMovie(cat(2,movieM{:})); %% Run cross-session alignment of cells % Create input images, cell array of [x y nCells] matrices inputImages = {day1Images,day2Images,day3Images}; % options to change opts.maxDistance = 5; % distance in pixels between centroids for them to be grouped opts.trialToAlign = 1; % which session to start alignment on opts.nCorrections = 1; %number of rounds to register session cell maps. opts.RegisTypeFinal = 2 % 3 = rotation/translation and iso scaling; 2 = rotation/translation, no iso scaling % Run alignment code [alignmentStruct] = matchObjBtwnTrials(inputImages,'options',opts); % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs; % View the cross-session matched cells, saved to `private\\_tmpFiles` sub-folder. [success] = createMatchObjBtwnTrialsMaps(inputImages,alignmentStruct);","title":"Example calciumImagingAnalysis pipeline via the command line."},{"location":"data/","text":"Data \u00b6 The class generally operates on the principal that a single imaging session is contained within a single folder or directory. Thus, even if a single imaging session contains multiple trials (e.g. the imaging data is split across multiple movies) this is fine as the class will concatenate them during the preprocessing step should the user request that. The naming convention in general is below. Both TIF and AVI raw files are supported and are converted to HDF5 after processing since that format offers more flexibility during cell extraction and other analysis steps. Input and output files \u00b6 Default raw imaging data filename: concat_.*.(h5|tif) . Default raw processed data filename: folderName_(processing steps).h5 , where folderName is the directory name where the calcium imaging movies are located. Main files output by calciumImagingAnalysis . Below, .* normally indicates the folder name prefixed to the filename. .*_pcaicaAnalysis.mat : Where PCA-ICA outputs are stored. .*_ICdecisions_.*.mat : Where decisions for cell (=1) and not cell (=0) are stored in a valid variable. .*_regionModSelectUser.mat : A mask of the region (=1) to include in further analyses. .*_turboreg_crop_dfof_1.h5 : Processed movie, in this case motion corrected, cropped, and \u0394_F/F_. processing_info : a folder containing preprocessing information. NWB Support \u00b6 calciumImagingAnalysis supports NWB format and by default will output cell-extraction analysis as calciumImagingAnalysis format unless user specifies otherwise. NWB files are by default stored in the nwbFiles sub-folder. This can be changed by setting the obj.nwbFileFolder property to a different folder name. Default image mask HDF5 dataset name: /processing/ophys/ImageSegmentation/PlaneSegmentation . Default fluorescence activity HDF5 dataset name: /processing/ophys/Fluorescence/RoiResponseSeries . Preferred folder naming format \u00b6 Folders should following the format YYYY_MM_DD_pXXX_mXXX_assayXX_trialXX where: YYYY_MM_DD = normal year/month/day scheme. pXXX = protocol number, e.g. p162, for the set of experiments performed for the same set of animals. mXXX = subject ID/number, e.g. m805 or animal ID. assayXX = assay ID and session number, e.g. vonfrey01 is the 1st von Frey assay session. trialXX = the trial number of the current assay session, only applicable if multiple trials in the same assay session. Videos \u00b6 HDF5: Saved as a [x y t] 3D matrix where x and y are the height and width of video while t is number of frames. /1 as the name for directory containing movie data. HDF can be read in using Fiji, see http://lmb.informatik.uni-freiburg.de/resources/opensource/imagej_plugins/hdf5.html . Each HDF5 file should contain imaging data in a dataset name, e.g. /1 is the default datasetname for [x y frames] 2D calcium imaging movies in this repository. Most functions have a inputDatasetName option to specify the dataset name if different from /1 . TIF Normal [x y frames] tif. AVI Raw uncompressed grayscale [x y frames] avi. Cell images \u00b6 IC filters from PCA-ICA and images from CNMF(-E). [x y n] matrix x and y being height/width of video and n is number of ICs output. Cell traces \u00b6 IC traces from PCA-ICA and images from CNMF(-E). [n f] matrix. n is number of ICs output and f is number of movie frames.","title":"Data formats"},{"location":"data/#data","text":"The class generally operates on the principal that a single imaging session is contained within a single folder or directory. Thus, even if a single imaging session contains multiple trials (e.g. the imaging data is split across multiple movies) this is fine as the class will concatenate them during the preprocessing step should the user request that. The naming convention in general is below. Both TIF and AVI raw files are supported and are converted to HDF5 after processing since that format offers more flexibility during cell extraction and other analysis steps.","title":"Data"},{"location":"data/#input-and-output-files","text":"Default raw imaging data filename: concat_.*.(h5|tif) . Default raw processed data filename: folderName_(processing steps).h5 , where folderName is the directory name where the calcium imaging movies are located. Main files output by calciumImagingAnalysis . Below, .* normally indicates the folder name prefixed to the filename. .*_pcaicaAnalysis.mat : Where PCA-ICA outputs are stored. .*_ICdecisions_.*.mat : Where decisions for cell (=1) and not cell (=0) are stored in a valid variable. .*_regionModSelectUser.mat : A mask of the region (=1) to include in further analyses. .*_turboreg_crop_dfof_1.h5 : Processed movie, in this case motion corrected, cropped, and \u0394_F/F_. processing_info : a folder containing preprocessing information.","title":"Input and output files"},{"location":"data/#nwb-support","text":"calciumImagingAnalysis supports NWB format and by default will output cell-extraction analysis as calciumImagingAnalysis format unless user specifies otherwise. NWB files are by default stored in the nwbFiles sub-folder. This can be changed by setting the obj.nwbFileFolder property to a different folder name. Default image mask HDF5 dataset name: /processing/ophys/ImageSegmentation/PlaneSegmentation . Default fluorescence activity HDF5 dataset name: /processing/ophys/Fluorescence/RoiResponseSeries .","title":"NWB Support"},{"location":"data/#preferred-folder-naming-format","text":"Folders should following the format YYYY_MM_DD_pXXX_mXXX_assayXX_trialXX where: YYYY_MM_DD = normal year/month/day scheme. pXXX = protocol number, e.g. p162, for the set of experiments performed for the same set of animals. mXXX = subject ID/number, e.g. m805 or animal ID. assayXX = assay ID and session number, e.g. vonfrey01 is the 1st von Frey assay session. trialXX = the trial number of the current assay session, only applicable if multiple trials in the same assay session.","title":"Preferred folder naming format"},{"location":"data/#videos","text":"HDF5: Saved as a [x y t] 3D matrix where x and y are the height and width of video while t is number of frames. /1 as the name for directory containing movie data. HDF can be read in using Fiji, see http://lmb.informatik.uni-freiburg.de/resources/opensource/imagej_plugins/hdf5.html . Each HDF5 file should contain imaging data in a dataset name, e.g. /1 is the default datasetname for [x y frames] 2D calcium imaging movies in this repository. Most functions have a inputDatasetName option to specify the dataset name if different from /1 . TIF Normal [x y frames] tif. AVI Raw uncompressed grayscale [x y frames] avi.","title":"Videos"},{"location":"data/#cell-images","text":"IC filters from PCA-ICA and images from CNMF(-E). [x y n] matrix x and y being height/width of video and n is number of ICs output.","title":"Cell images"},{"location":"data/#cell-traces","text":"IC traces from PCA-ICA and images from CNMF(-E). [n f] matrix. n is number of ICs output and f is number of movie frames.","title":"Cell traces"},{"location":"dependencies/","text":"Dependencies \u00b6 By default external MATLAB-based software packages are stored in _external_programs . MATLAB Toolbox dependencies \u00b6 Primary toolboxes distrib_computing_toolbox image_toolbox signal_toolbox statistics_toolbox Secondary toolboxes (not required for main pre-processing pipeline) video_and_image_blockset bioinformatics_toolbox financial_toolbox neural_network_toolbox Parallel Computing Toolbox (PCT) \u00b6 By default both calciumImagingAnalysis and PCT auto-start a parallel pool for functions that use parallelization (e.g. or calls to parfor ). For some users this may not be desired, in that case go to MATLAB preferences and uncheck the below. Or enter the following commands into the MATLAB command window: parSet = parallel.Settings; parSet.Pool.AutoCreate = false; ImageJ \u00b6 Run downloadMiji from downloads\\downloadMiji.m or obj.loadDependencies (when class initialized) to download Fiji version appropriate to your platform. Else download Fiji (preferably 2015 December 22 version): https://imagej.net/Fiji/Downloads . Make sure have Miji in Fiji installation: http://bigwww.epfl.ch/sage/soft/mij/ . This is used as an alternative to the calciumImagingAnalysis playMovie.m function for viewing movies and is needed for some movie modification steps. Saleae \u00b6 Only download if doing behavior and imaging experiments that use this DAQ device to collect data. Download 1.2.26: https://support.saleae.com/logic-software/legacy-software/older-software-releases#1-2-26-download . CNMF and CNMF-E \u00b6 Download repositories by running downloadCnmfGithubRepositories.m or obj.loadDependencies (when class is initialized). CNMF: https://github.com/flatironinstitute/CaImAn-MATLAB . CNMF-E: https://github.com/bahanonu/CNMF_E forked from https://github.com/zhoupc/CNMF_E to fix HDF5, movies with NaNs, and other related compatibility issues. CVX: http://cvxr.com/cvx/download/ . Download All platforms ( Redistributable: free solvers only ), e.g. http://web.cvxr.com/cvx/cvx-rd.zip . Neurodata Without Borders \u00b6 Neurodata Without Borders (NWB) file support requires the following GitHub repositories be present in the _external_programs folder. These are downloaded automatically when running obj.setup . - https://github.com/schnitzer-lab/nwb_schnitzer_lab . - https://github.com/ewiger/yamlmatlab . - https://github.com/NeurodataWithoutBorders/matnwb .","title":"Dependencies"},{"location":"dependencies/#dependencies","text":"By default external MATLAB-based software packages are stored in _external_programs .","title":"Dependencies"},{"location":"dependencies/#matlab-toolbox-dependencies","text":"Primary toolboxes distrib_computing_toolbox image_toolbox signal_toolbox statistics_toolbox Secondary toolboxes (not required for main pre-processing pipeline) video_and_image_blockset bioinformatics_toolbox financial_toolbox neural_network_toolbox","title":"MATLAB Toolbox dependencies"},{"location":"dependencies/#parallel-computing-toolbox-pct","text":"By default both calciumImagingAnalysis and PCT auto-start a parallel pool for functions that use parallelization (e.g. or calls to parfor ). For some users this may not be desired, in that case go to MATLAB preferences and uncheck the below. Or enter the following commands into the MATLAB command window: parSet = parallel.Settings; parSet.Pool.AutoCreate = false;","title":"Parallel Computing Toolbox (PCT)"},{"location":"dependencies/#imagej","text":"Run downloadMiji from downloads\\downloadMiji.m or obj.loadDependencies (when class initialized) to download Fiji version appropriate to your platform. Else download Fiji (preferably 2015 December 22 version): https://imagej.net/Fiji/Downloads . Make sure have Miji in Fiji installation: http://bigwww.epfl.ch/sage/soft/mij/ . This is used as an alternative to the calciumImagingAnalysis playMovie.m function for viewing movies and is needed for some movie modification steps.","title":"ImageJ"},{"location":"dependencies/#saleae","text":"Only download if doing behavior and imaging experiments that use this DAQ device to collect data. Download 1.2.26: https://support.saleae.com/logic-software/legacy-software/older-software-releases#1-2-26-download .","title":"Saleae"},{"location":"dependencies/#cnmf-and-cnmf-e","text":"Download repositories by running downloadCnmfGithubRepositories.m or obj.loadDependencies (when class is initialized). CNMF: https://github.com/flatironinstitute/CaImAn-MATLAB . CNMF-E: https://github.com/bahanonu/CNMF_E forked from https://github.com/zhoupc/CNMF_E to fix HDF5, movies with NaNs, and other related compatibility issues. CVX: http://cvxr.com/cvx/download/ . Download All platforms ( Redistributable: free solvers only ), e.g. http://web.cvxr.com/cvx/cvx-rd.zip .","title":"CNMF and CNMF-E"},{"location":"dependencies/#neurodata-without-borders","text":"Neurodata Without Borders (NWB) file support requires the following GitHub repositories be present in the _external_programs folder. These are downloaded automatically when running obj.setup . - https://github.com/schnitzer-lab/nwb_schnitzer_lab . - https://github.com/ewiger/yamlmatlab . - https://github.com/NeurodataWithoutBorders/matnwb .","title":"Neurodata Without Borders"},{"location":"example_data/","text":"Example data \u00b6 The calciumImagingAnalysis repository contains several example one-photon calcium imaging movies from miniature microscope experiments in freely moving rodents. To download example data, run loadDependencies module (e.g. obj.loadDependencies ) and select Download test one-photon data. option to download one-photon miniature microscope example datasets to use for testing calciumImagingAnalysis preprocessing, cell extraction, and cell classification code. The data will be located in the data folder within the repository root directory. Else run example_downloadTestData.m from the MATLAB command line with the working directory set to the calciumImagingAnalysis repository.","title":"Example data"},{"location":"example_data/#example-data","text":"The calciumImagingAnalysis repository contains several example one-photon calcium imaging movies from miniature microscope experiments in freely moving rodents. To download example data, run loadDependencies module (e.g. obj.loadDependencies ) and select Download test one-photon data. option to download one-photon miniature microscope example datasets to use for testing calciumImagingAnalysis preprocessing, cell extraction, and cell classification code. The data will be located in the data folder within the repository root directory. Else run example_downloadTestData.m from the MATLAB command line with the working directory set to the calciumImagingAnalysis repository.","title":"Example data"},{"location":"help_analysis_methods/","text":"Imaging analysis methods and code \u00b6 Outline of outside code, software packages, or techniques relevant to calcium imaging analysis. Also includes links to papers or GitHub code repositories. Find an overview of calcium imaging analysis methods at https://bahanonu.com/brain/#c20181209 . Or see below. Image Registration \u00b6 Turboreg http://bigwww.epfl.ch/thevenaz/turboreg/ NoRMCorre https://github.com/simonsfoundation/NoRMCorre moco https://github.com/NTCColumbia/moco Cross-day alignment \u00b6 CellReg (Ziv lab) https://github.com/zivlab/CellReg/issues/1 Cell segmentation (static image) \u00b6 NeuroSeg: automated cell detection and segmentation for in vivo two-photon Ca2+ imaging data https://link.springer.com/article/10.1007/s00429-017-1545-5 https://github.com/baidatong/NeuroSeg Cell extraction (dynamic movie) \u00b6 PCA-ICA (Schnitzer) https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3282191/ https://github.com/schnitzer-lab/miniscope_analysis/tree/master/signal_extraction/pca_ica CELLMax (Schnitzer) https://github.com/schnitzer-lab/CELLMax CNMF (Paninski) https://github.com/epnev/ca_source_extraction https://github.com/flatironinstitute/CaImAn-MATLAB CNMF-E (Paninski) - for miniscope data https://github.com/zhoupc/CNMF_E CNMF-E+ (Fukai) Automatic sorting system for large calcium imaging data https://www.biorxiv.org/content/early/2017/11/09/215145 Automatic Neuron Detection in Calcium Imaging Data Using Convolutional Networks http://papers.nips.cc/paper/6137-automatic-neuron-detection-in-calcium-imaging-data-using-convolutional-networks SCALPEL: Extracting Neurons from Calcium Imaging Data https://arxiv.org/abs/1703.06946 HNCcorr: A Novel Combinatorial Approach for Cell Identification in Calcium-Imaging Movies https://arxiv.org/abs/1703.01999 Seeds Cleansing CNMF for Spatiotemporal Neural Signals Extraction of Miniscope Imaging Data (Simon email this one out recently) https://arxiv.org/abs/1704.00793 ABLE: An Activity-Based Level Set Segmentation Algorithm for Two-Photon Calcium Imaging Data http://www.eneuro.org/content/4/5/ENEURO.0012-17.2017 https://github.com/StephanieRey/ABLE . STNeuroNet: Fast and robust active neuron segmentation in two-photon calcium imaging using spatiotemporal deep learning https://www.pnas.org/content/116/17/8554.short Cell-extraction correction \u00b6 NAOMi (Neural Anatomy and Optical Microscopy) https://www.biorxiv.org/content/10.1101/726174v1.full Full packages \u00b6 Suite2P https://github.com/cortex-lab/Suite2P OnACID \u2014 OnACID: Online Analysis of Calcium Imaging Data in Real Time https://www.biorxiv.org/content/early/2017/10/02/193383 CaImAn (Computational toolbox for large scale Calcium Imaging Analysis) https://github.com/simonsfoundation/CaImAn CALIMA: The Semi-automated open-source Calcium imaging analyzer https://doi.org/10.1016/j.cmpb.2019.104991 https://aethelraed.nl/calciumimaginganalyser/index.html NETCAL: An interactive platform for large-scale, NETwork and population dynamics analysis of CALcium imaging recordings https://zenodo.org/record/1119026#.XT9GdxSYVds http://www.itsnetcal.com/ Standards \u00b6 https://github.com/NeurodataWithoutBorders/api-matlab","title":"Analysis methods"},{"location":"help_analysis_methods/#imaging-analysis-methods-and-code","text":"Outline of outside code, software packages, or techniques relevant to calcium imaging analysis. Also includes links to papers or GitHub code repositories. Find an overview of calcium imaging analysis methods at https://bahanonu.com/brain/#c20181209 . Or see below.","title":"Imaging analysis methods and code"},{"location":"help_analysis_methods/#image-registration","text":"Turboreg http://bigwww.epfl.ch/thevenaz/turboreg/ NoRMCorre https://github.com/simonsfoundation/NoRMCorre moco https://github.com/NTCColumbia/moco","title":"Image Registration"},{"location":"help_analysis_methods/#cross-day-alignment","text":"CellReg (Ziv lab) https://github.com/zivlab/CellReg/issues/1","title":"Cross-day alignment"},{"location":"help_analysis_methods/#cell-segmentation-static-image","text":"NeuroSeg: automated cell detection and segmentation for in vivo two-photon Ca2+ imaging data https://link.springer.com/article/10.1007/s00429-017-1545-5 https://github.com/baidatong/NeuroSeg","title":"Cell segmentation (static image)"},{"location":"help_analysis_methods/#cell-extraction-dynamic-movie","text":"PCA-ICA (Schnitzer) https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3282191/ https://github.com/schnitzer-lab/miniscope_analysis/tree/master/signal_extraction/pca_ica CELLMax (Schnitzer) https://github.com/schnitzer-lab/CELLMax CNMF (Paninski) https://github.com/epnev/ca_source_extraction https://github.com/flatironinstitute/CaImAn-MATLAB CNMF-E (Paninski) - for miniscope data https://github.com/zhoupc/CNMF_E CNMF-E+ (Fukai) Automatic sorting system for large calcium imaging data https://www.biorxiv.org/content/early/2017/11/09/215145 Automatic Neuron Detection in Calcium Imaging Data Using Convolutional Networks http://papers.nips.cc/paper/6137-automatic-neuron-detection-in-calcium-imaging-data-using-convolutional-networks SCALPEL: Extracting Neurons from Calcium Imaging Data https://arxiv.org/abs/1703.06946 HNCcorr: A Novel Combinatorial Approach for Cell Identification in Calcium-Imaging Movies https://arxiv.org/abs/1703.01999 Seeds Cleansing CNMF for Spatiotemporal Neural Signals Extraction of Miniscope Imaging Data (Simon email this one out recently) https://arxiv.org/abs/1704.00793 ABLE: An Activity-Based Level Set Segmentation Algorithm for Two-Photon Calcium Imaging Data http://www.eneuro.org/content/4/5/ENEURO.0012-17.2017 https://github.com/StephanieRey/ABLE . STNeuroNet: Fast and robust active neuron segmentation in two-photon calcium imaging using spatiotemporal deep learning https://www.pnas.org/content/116/17/8554.short","title":"Cell extraction (dynamic movie)"},{"location":"help_analysis_methods/#cell-extraction-correction","text":"NAOMi (Neural Anatomy and Optical Microscopy) https://www.biorxiv.org/content/10.1101/726174v1.full","title":"Cell-extraction correction"},{"location":"help_analysis_methods/#full-packages","text":"Suite2P https://github.com/cortex-lab/Suite2P OnACID \u2014 OnACID: Online Analysis of Calcium Imaging Data in Real Time https://www.biorxiv.org/content/early/2017/10/02/193383 CaImAn (Computational toolbox for large scale Calcium Imaging Analysis) https://github.com/simonsfoundation/CaImAn CALIMA: The Semi-automated open-source Calcium imaging analyzer https://doi.org/10.1016/j.cmpb.2019.104991 https://aethelraed.nl/calciumimaginganalyser/index.html NETCAL: An interactive platform for large-scale, NETwork and population dynamics analysis of CALcium imaging recordings https://zenodo.org/record/1119026#.XT9GdxSYVds http://www.itsnetcal.com/","title":"Full packages"},{"location":"help_analysis_methods/#standards","text":"https://github.com/NeurodataWithoutBorders/api-matlab","title":"Standards"},{"location":"help_animal_tracking/","text":"Tracking \u00b6 Code for ImageJ and Matlab based image tracking. ImageJ based tracking \u00b6 Functions needed (have entire miniscope_analysis loaded anyways): mm_tracking.ijm is the tracking function for use in ImageJ, place in plugins folder. removeIncorrectObjs.m is a function to clean-up the ImageJ output. createTrackingOverlayVideo is a way to check the output from the tracking by overlaying mouse tracker onto the video. Instructions for ImageJ and Matlab \u00b6 Example screen after running mm_tracking within ImageJ, click to expand. Once ImageJ is finished, within Matlab run the following code (cleans up the ImageJ tracking by removing small objects and adding NaNs for missing frames along with making a movie to check output). Modify to point toward paths specific for your data. % CSV file from imageJ and AVI movie path used in ImageJ moviePath = 'PATH_TO_AVI_USED_IN_IMAEJ'; csvPath = 'PATH_TO_CSV_OUTPUT_BY_IMAGEJ'; % clean up tracking [trackingTableFilteredCell] = removeIncorrectObjs(csvPath,'inputMovie',{moviePath}); % make tracking video % frames to use as example check nFrames=1500:2500; inputMovie = loadMovieList(moviePath,'frameList',nFrames); [inputTrackingVideo] = createTrackingOverlayVideo(inputMovie,movmean(trackingTableFilteredCell.XM(nFrames),5),movmean(trackingTableFilteredCell.YM(nFrames),5)); playMovie(inputTrackingVideo); Example output from 2017_09_11_p540_m381_openfield01_091112017 \u00b6 Matlab based tracking \u00b6 Refer to https://github.com/schnitzer-lab/miniscope_analysis/issues/21 for additional details about testing this function.","title":"Animal tracking"},{"location":"help_animal_tracking/#tracking","text":"Code for ImageJ and Matlab based image tracking.","title":"Tracking"},{"location":"help_animal_tracking/#imagej-based-tracking","text":"Functions needed (have entire miniscope_analysis loaded anyways): mm_tracking.ijm is the tracking function for use in ImageJ, place in plugins folder. removeIncorrectObjs.m is a function to clean-up the ImageJ output. createTrackingOverlayVideo is a way to check the output from the tracking by overlaying mouse tracker onto the video.","title":"ImageJ based tracking"},{"location":"help_animal_tracking/#instructions-for-imagej-and-matlab","text":"Example screen after running mm_tracking within ImageJ, click to expand. Once ImageJ is finished, within Matlab run the following code (cleans up the ImageJ tracking by removing small objects and adding NaNs for missing frames along with making a movie to check output). Modify to point toward paths specific for your data. % CSV file from imageJ and AVI movie path used in ImageJ moviePath = 'PATH_TO_AVI_USED_IN_IMAEJ'; csvPath = 'PATH_TO_CSV_OUTPUT_BY_IMAGEJ'; % clean up tracking [trackingTableFilteredCell] = removeIncorrectObjs(csvPath,'inputMovie',{moviePath}); % make tracking video % frames to use as example check nFrames=1500:2500; inputMovie = loadMovieList(moviePath,'frameList',nFrames); [inputTrackingVideo] = createTrackingOverlayVideo(inputMovie,movmean(trackingTableFilteredCell.XM(nFrames),5),movmean(trackingTableFilteredCell.YM(nFrames),5)); playMovie(inputTrackingVideo);","title":"Instructions for ImageJ and Matlab"},{"location":"help_animal_tracking/#example-output-from-2017_09_11_p540_m381_openfield01_091112017","text":"","title":"Example output from 2017_09_11_p540_m381_openfield01_091112017"},{"location":"help_animal_tracking/#matlab-based-tracking","text":"Refer to https://github.com/schnitzer-lab/miniscope_analysis/issues/21 for additional details about testing this function.","title":"Matlab based tracking"},{"location":"help_cross_session_alignment/","text":"Cross-day or -session cell alignment alignment \u00b6 Find the main function at https://github.com/bahanonu/calciumImagingAnalysis/blob/master/classification/matchObjBtwnTrials.m Algorithm overview \u00b6 For details, see Cross-day analysis of BLA neuronal activity methods section in the associated Science paper: http://science.sciencemag.org/content/sci/suppl/2019/01/16/363.6424.276.DC1/aap8586_Corder_SM.pdf#page=10 . Example output on several mPFC animals across multiple sessions. Color is used to indicate a global ID cell (e.g. the same cell matched across multiple days). Usage \u00b6 The below commands in MATLAB can be used to align sessions across days. % Create input images, cell array of [x y nCells] matrices inputImages = {day1Images,day2Images,day3Images}; % options to change opts.maxDistance = 5; % distance in pixels between centroids for them to be grouped opts.trialToAlign = 1; % which session to start alignment on opts.nCorrections = 1; %number of rounds to register session cell maps. opts.RegisTypeFinal = 2 % 3 = rotation/translation and iso scaling; 2 = rotation/translation, no iso scaling % Run alignment code [alignmentStruct] = matchObjBtwnTrials(inputImages,'options',opts); % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs; % View the cross-session matched cells, saved to `private\\_tmpFiles` sub-folder. [success] = createMatchObjBtwnTrialsMaps(inputImages,alignmentStruct); In certain cases, you want to run analysis on the registered images, see below. % Get registered images, cell array of [x y nCells] matrices registeredImagesCell = alignmentStruct.inputImages; % Get registered cell maps, cell array of [x y] matrices registeredCellmaps = alignmentStruct.objectMapTurboreg; % OR another method below. % Get the registration coordinates globalRegCoords = alignmentStruct.registrationCoords; globalRegCoords = globalRegCoords{folderNo}; % Re-register input images for particular imaging session for later analysis. for iterationNo = 1:length(globalRegCoords) fn=fieldnames(globalRegCoords{iterationNo}); for i=1:length(fn) localCoords = globalRegCoords{iterationNo}.(fn{i}); [inputImages, localCoords] = turboregMovie(inputImages,'precomputedRegistrationCooords',localCoords); end end Algorithm results \u00b6 Cross-session metrics and results on cross-session amygdala response to pain \u00b6 PFC cross-session alignment. \u00b6 Dorsal striatum cross-session algorithm comparison \u00b6 Original dorsal striatum cell maps from ICA with no motion correction applied. calciumImagingAnalysis (Biafra's) registration algorithm Color is used to indicate a global ID cell (e.g. the same cell matched across multiple days). Thus, same color cell = same cell across sessions under the quick iteration parameters used in the below run. CellReg registration algorithm Using older code at https://github.com/zivlab/CellReg .","title":"Cross-session alignemnt"},{"location":"help_cross_session_alignment/#cross-day-or-session-cell-alignment-alignment","text":"Find the main function at https://github.com/bahanonu/calciumImagingAnalysis/blob/master/classification/matchObjBtwnTrials.m","title":"Cross-day or -session cell alignment alignment"},{"location":"help_cross_session_alignment/#algorithm-overview","text":"For details, see Cross-day analysis of BLA neuronal activity methods section in the associated Science paper: http://science.sciencemag.org/content/sci/suppl/2019/01/16/363.6424.276.DC1/aap8586_Corder_SM.pdf#page=10 . Example output on several mPFC animals across multiple sessions. Color is used to indicate a global ID cell (e.g. the same cell matched across multiple days).","title":"Algorithm overview"},{"location":"help_cross_session_alignment/#usage","text":"The below commands in MATLAB can be used to align sessions across days. % Create input images, cell array of [x y nCells] matrices inputImages = {day1Images,day2Images,day3Images}; % options to change opts.maxDistance = 5; % distance in pixels between centroids for them to be grouped opts.trialToAlign = 1; % which session to start alignment on opts.nCorrections = 1; %number of rounds to register session cell maps. opts.RegisTypeFinal = 2 % 3 = rotation/translation and iso scaling; 2 = rotation/translation, no iso scaling % Run alignment code [alignmentStruct] = matchObjBtwnTrials(inputImages,'options',opts); % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs; % View the cross-session matched cells, saved to `private\\_tmpFiles` sub-folder. [success] = createMatchObjBtwnTrialsMaps(inputImages,alignmentStruct); In certain cases, you want to run analysis on the registered images, see below. % Get registered images, cell array of [x y nCells] matrices registeredImagesCell = alignmentStruct.inputImages; % Get registered cell maps, cell array of [x y] matrices registeredCellmaps = alignmentStruct.objectMapTurboreg; % OR another method below. % Get the registration coordinates globalRegCoords = alignmentStruct.registrationCoords; globalRegCoords = globalRegCoords{folderNo}; % Re-register input images for particular imaging session for later analysis. for iterationNo = 1:length(globalRegCoords) fn=fieldnames(globalRegCoords{iterationNo}); for i=1:length(fn) localCoords = globalRegCoords{iterationNo}.(fn{i}); [inputImages, localCoords] = turboregMovie(inputImages,'precomputedRegistrationCooords',localCoords); end end","title":"Usage"},{"location":"help_cross_session_alignment/#algorithm-results","text":"","title":"Algorithm results"},{"location":"help_cross_session_alignment/#cross-session-metrics-and-results-on-cross-session-amygdala-response-to-pain","text":"","title":"Cross-session metrics and results on cross-session amygdala response to pain"},{"location":"help_cross_session_alignment/#pfc-cross-session-alignment","text":"","title":"PFC cross-session alignment."},{"location":"help_cross_session_alignment/#dorsal-striatum-cross-session-algorithm-comparison","text":"Original dorsal striatum cell maps from ICA with no motion correction applied. calciumImagingAnalysis (Biafra's) registration algorithm Color is used to indicate a global ID cell (e.g. the same cell matched across multiple days). Thus, same color cell = same cell across sessions under the quick iteration parameters used in the below run. CellReg registration algorithm Using older code at https://github.com/zivlab/CellReg .","title":"Dorsal striatum cross-session algorithm comparison"},{"location":"help_inscopix/","text":"Inscopix \u00b6 Documentation related to Inscopix-specific functions on the repository. Converting ISXD files to HDF5 \u00b6 To convert ISXD files to HDF5, see convertInscopixIsxdToHdf5 function in the inscopix folder or modelDownsampleRawMovies module in calciumImagingAnalysis. Note : By default the Inscopix API gives out a frame full of 0s for dropped frames. So those 0s frames are maintained after converting/downsampling to HDF5 or you will also get a frame with 0s if you use loadMovieList to read frames that were dropped from isxd files. Adjust analysis accordingly. To use this function call it as below: moviePath = 'PATH_TO_ISXD'; opts.maxChunkSize = 5000; % Max chunk size in Mb to load into RAM. opts.downsampleFactor = 4; % How much to downsample original movie, set to 1 for no downsampling. convertInscopixIsxdToHdf5(moviePath,'options',opts); If you want to save to a custom folder, use saveFolder input. moviePath = 'PATH_TO_ISXD'; opts.maxChunkSize = 5000; % Max chunk size in Mb to load into RAM. opts.downsampleFactor = 4; % How much to downsample original movie, set to 1 for no downsampling. opts.saveFolder = 'ALT_FOLDER_PATH'; % Char: alternative file path convertInscopixIsxdToHdf5(moviePath,'options',opts); The same functionality can be achieved by loading a calciumImagingAnalysis module using the below commands. By default modelDownsampleRawMovies module will see .isxd files and call convertInscopixIsxdToHdf5 . This can be done on multiple folders by separating them with commas in the modelDownsampleRawMovies menu. obj = calciumImagingAnalysis; obj.modelDownsampleRawMovies;","title":"Inscopix"},{"location":"help_inscopix/#inscopix","text":"Documentation related to Inscopix-specific functions on the repository.","title":"Inscopix"},{"location":"help_inscopix/#converting-isxd-files-to-hdf5","text":"To convert ISXD files to HDF5, see convertInscopixIsxdToHdf5 function in the inscopix folder or modelDownsampleRawMovies module in calciumImagingAnalysis. Note : By default the Inscopix API gives out a frame full of 0s for dropped frames. So those 0s frames are maintained after converting/downsampling to HDF5 or you will also get a frame with 0s if you use loadMovieList to read frames that were dropped from isxd files. Adjust analysis accordingly. To use this function call it as below: moviePath = 'PATH_TO_ISXD'; opts.maxChunkSize = 5000; % Max chunk size in Mb to load into RAM. opts.downsampleFactor = 4; % How much to downsample original movie, set to 1 for no downsampling. convertInscopixIsxdToHdf5(moviePath,'options',opts); If you want to save to a custom folder, use saveFolder input. moviePath = 'PATH_TO_ISXD'; opts.maxChunkSize = 5000; % Max chunk size in Mb to load into RAM. opts.downsampleFactor = 4; % How much to downsample original movie, set to 1 for no downsampling. opts.saveFolder = 'ALT_FOLDER_PATH'; % Char: alternative file path convertInscopixIsxdToHdf5(moviePath,'options',opts); The same functionality can be achieved by loading a calciumImagingAnalysis module using the below commands. By default modelDownsampleRawMovies module will see .isxd files and call convertInscopixIsxdToHdf5 . This can be done on multiple folders by separating them with commas in the modelDownsampleRawMovies menu. obj = calciumImagingAnalysis; obj.modelDownsampleRawMovies;","title":"Converting ISXD files to HDF5"},{"location":"help_issues/","text":"Common issues and fixes \u00b6 Page outlines some common issues and fixes to them that may be encountered while using calciumImagingAnalysis . These are mostly due to quirks specific to MATLAB, Fiji, or the computing environment calciumImagingAnalysis is used on. Contents \u00b6 PCA-ICA, CNMF-E, or other cell extraction algorithm's don't produce sensible output. Out of memory using Miji Selecting scripts folder in Fiji.app on Mac OS X Fiji won't start using Miji or MIJ.start downloadCnmfGithubRepositories.m not downloading correctly modelPreprocessMovie analysis options list not showing Miji not loading correctly viewMovie or other functions where movies need to be loaded end without executing Contrast is low on cell transient \u0394F/F movies using computeManualSortSignals Traces in computeManualSortSignals GUI are flat. Can't see transients. Change the min/max. Can now see transients. Blank frames or entire frames have baseline shifted after motion correction in modelPreprocessMovie File or folder dialog box with no instructions PCA-ICA, CNMF-E, or other cell extraction algorithm's don't produce sensible output. \u00b6 When running modelPreprocessMovie a dialog box appears showing the available analysis steps. Certain combinations of these steps make sense while others should be avoided. For example, normally users want turboreg->crop->dfof->downsampleTime . An invalid input would be turboreg->crop->dfof->dfstd->downsampleTime . Since calculating the dF/F then dF/std is problematic. For two photon data, it is sometimes desired to have medianFilter->turboreg->crop->dfstd (or dfof)->downsampleTime . In general, fft_highpass and fft_lowpass should be avoided since they are meant to be run on stand-alone movies for specific purposes rather than included in the general pipeline. Remember at the options screen (see below) to select a spatial filtering there under the option filterBeforeRegister instead of selecting the spatialFilter option before the turboreg option in the analysis steps screen. Out of memory using Miji \u00b6 If you get a java.lang.OutOfMemoryError: GC overhead limit exceeded style error (see below code) when trying to open a movie with Miji , make sure that you initialize MATLAB in the calciumImagingAnalysis path or place the java.opts file in your MATLAB start-up folder. java.lang.OutOfMemoryError: GC overhead limit exceeded at java.lang.AbstractStringBuilder.<init>(Unknown Source) at java.lang.StringBuilder.<init>(Unknown Source) On Windows, you can change the start-up folder as below or in general see https://www.mathworks.com/help/matlab/matlab_env/matlab-startup-folder.html . java.opts increases the amount of memory allocated so that Java doesn't run out when using Miji to load movies. To change the amount of memory allocated (calciumImagingAnalysis sets to 7 Gb by default), change the below to a higher or lower number, e.g. 9 Gb would be -Xmx9000m . -Xmx7000m Selecting scripts folder in Fiji.app on Mac OS X \u00b6 Navigate to the applications folder and select Fiji.app and Show Package Contents . Then navigate to /Fiji.app/scripts and select Miji.m then Get Info . Select and copy the path as below. When Matlab ask for the Fiji path, press command + shift + G in the dialog box to enter the full path manually, press enter, then select open. Fiji won't start using Miji or MIJ.start \u00b6 If calling Miji or MIJ.start does not lead to a Fiji GUI appearing (e.g. the below output is seen in the command window), this is likely because the last Fiji/ImageJ instance was closed improperly (e.g. by closing ImageJ with File->Quit or pressing the close button instead of MIJ.exit in the Matlab command window), leading to a headless Fiji that cannot be properly closed by Miji/Matlab. -------------------------------------------------------------- Status> ImageJ is already started. -------------------------------------------------------------- If this occurs, run the following commands one at a time: resetMiji % An instance of Miji should appear. currP=pwd;Miji;cd(currP); MIJ.exit downloadCnmfGithubRepositories.m not downloading correctly \u00b6 If when trying to download using downloadCnmfGithubRepositories.m the below error is encountered, try to run downloadCnmfGithubRepositories several more times as websave (MATLAB built-in function) sometimes momentarily does not obtain the correct write permissions and fails. @@@@@@@ Error using websave (line 104) Unable to open output file: 'signal_extraction\\cnmfe.zip' for writing. Common reasons include that the file exists and does not have write permission or the folder does not have write permissions. modelPreprocessMovie analysis options list not showing \u00b6 MATLAB changed uitables internal implementation, hence findjobj (File Exchange function) broke causing reorderableListbox (File Exchange function) to also break. An updated findjobj has been added to the calciumImagingAnalysis repository and this error (see below) should no longer occur. Error in reorderableListbox (line 127) jScrollPane = jScrollPane(1); Miji not loading correctly \u00b6 The below error occurs when the wrong version of Fiji is downloaded. Please 2015 December 22 version download from https://imagej.net/Fiji/Downloads as that implementation of Miji.m appears to work correctly with MATLAB. @@@@@@@ Error using javaObject No class MIJ can be located on the Java class path viewMovie or other functions where movies need to be loaded end without executing \u00b6 It is likely that the regular expression given to calciumImagingAnalysis does not match any of the files in the folder being analyzed. For example, in viewMovie , the below Image movie regexp setting should be changed to concat correspond to the demo raw imaging data's name. Contrast is low on cell transient \u0394F/F movies using computeManualSortSignals \u00b6 The contrast (e.g. min/max) are estimated automatically from movie data, but will not always be the optimal display for manual human sorting of data. To improve the contrast, press q while in the interface and adjust the min/max values until you are in a satisfactory range. See below. Default contrast: Contrast after user editing: Traces in computeManualSortSignals GUI are flat. \u00b6 Likely this is due to one of the traces having values that are very high, throwing off the estimate used set the y-axis in the GUI (which is constant across all candidate cells). This can be changed by pressing w , see below. Can't see transients. \u00b6 Change the min/max. \u00b6 Can now see transients. \u00b6 Blank frames or entire frames have baseline shifted after motion correction in modelPreprocessMovie \u00b6 This normally occurs when transfturboreg is selected as the registrationFxn , in some Windows editions and OSX versions this leads to random baseline shifts. If this occurs change registrationFxn to imtransform . See below (green selected option). File or folder dialog box with no instructions \u00b6 This is mainly on OS X , where in some versions the dialog boxes are not styled with title bars (see below). This is outside of MATLAB's control. If this occurs, check the command window as the instructions should also be provided there (e.g. with Dialog box: [TITLE] style text).","title":"Issues and fixes"},{"location":"help_issues/#common-issues-and-fixes","text":"Page outlines some common issues and fixes to them that may be encountered while using calciumImagingAnalysis . These are mostly due to quirks specific to MATLAB, Fiji, or the computing environment calciumImagingAnalysis is used on.","title":"Common issues and fixes"},{"location":"help_issues/#contents","text":"PCA-ICA, CNMF-E, or other cell extraction algorithm's don't produce sensible output. Out of memory using Miji Selecting scripts folder in Fiji.app on Mac OS X Fiji won't start using Miji or MIJ.start downloadCnmfGithubRepositories.m not downloading correctly modelPreprocessMovie analysis options list not showing Miji not loading correctly viewMovie or other functions where movies need to be loaded end without executing Contrast is low on cell transient \u0394F/F movies using computeManualSortSignals Traces in computeManualSortSignals GUI are flat. Can't see transients. Change the min/max. Can now see transients. Blank frames or entire frames have baseline shifted after motion correction in modelPreprocessMovie File or folder dialog box with no instructions","title":"Contents"},{"location":"help_issues/#pca-ica-cnmf-e-or-other-cell-extraction-algorithms-dont-produce-sensible-output","text":"When running modelPreprocessMovie a dialog box appears showing the available analysis steps. Certain combinations of these steps make sense while others should be avoided. For example, normally users want turboreg->crop->dfof->downsampleTime . An invalid input would be turboreg->crop->dfof->dfstd->downsampleTime . Since calculating the dF/F then dF/std is problematic. For two photon data, it is sometimes desired to have medianFilter->turboreg->crop->dfstd (or dfof)->downsampleTime . In general, fft_highpass and fft_lowpass should be avoided since they are meant to be run on stand-alone movies for specific purposes rather than included in the general pipeline. Remember at the options screen (see below) to select a spatial filtering there under the option filterBeforeRegister instead of selecting the spatialFilter option before the turboreg option in the analysis steps screen.","title":"PCA-ICA, CNMF-E, or other cell extraction algorithm's don't produce sensible output."},{"location":"help_issues/#out-of-memory-using-miji","text":"If you get a java.lang.OutOfMemoryError: GC overhead limit exceeded style error (see below code) when trying to open a movie with Miji , make sure that you initialize MATLAB in the calciumImagingAnalysis path or place the java.opts file in your MATLAB start-up folder. java.lang.OutOfMemoryError: GC overhead limit exceeded at java.lang.AbstractStringBuilder.<init>(Unknown Source) at java.lang.StringBuilder.<init>(Unknown Source) On Windows, you can change the start-up folder as below or in general see https://www.mathworks.com/help/matlab/matlab_env/matlab-startup-folder.html . java.opts increases the amount of memory allocated so that Java doesn't run out when using Miji to load movies. To change the amount of memory allocated (calciumImagingAnalysis sets to 7 Gb by default), change the below to a higher or lower number, e.g. 9 Gb would be -Xmx9000m . -Xmx7000m","title":"Out of memory using Miji"},{"location":"help_issues/#selecting-scripts-folder-in-fijiapp-on-mac-os-x","text":"Navigate to the applications folder and select Fiji.app and Show Package Contents . Then navigate to /Fiji.app/scripts and select Miji.m then Get Info . Select and copy the path as below. When Matlab ask for the Fiji path, press command + shift + G in the dialog box to enter the full path manually, press enter, then select open.","title":"Selecting scripts folder in Fiji.app on Mac OS X"},{"location":"help_issues/#fiji-wont-start-using-miji-or-mijstart","text":"If calling Miji or MIJ.start does not lead to a Fiji GUI appearing (e.g. the below output is seen in the command window), this is likely because the last Fiji/ImageJ instance was closed improperly (e.g. by closing ImageJ with File->Quit or pressing the close button instead of MIJ.exit in the Matlab command window), leading to a headless Fiji that cannot be properly closed by Miji/Matlab. -------------------------------------------------------------- Status> ImageJ is already started. -------------------------------------------------------------- If this occurs, run the following commands one at a time: resetMiji % An instance of Miji should appear. currP=pwd;Miji;cd(currP); MIJ.exit","title":"Fiji won't start using Miji or MIJ.start"},{"location":"help_issues/#downloadcnmfgithubrepositoriesm-not-downloading-correctly","text":"If when trying to download using downloadCnmfGithubRepositories.m the below error is encountered, try to run downloadCnmfGithubRepositories several more times as websave (MATLAB built-in function) sometimes momentarily does not obtain the correct write permissions and fails. @@@@@@@ Error using websave (line 104) Unable to open output file: 'signal_extraction\\cnmfe.zip' for writing. Common reasons include that the file exists and does not have write permission or the folder does not have write permissions.","title":"downloadCnmfGithubRepositories.m not downloading correctly"},{"location":"help_issues/#modelpreprocessmovie-analysis-options-list-not-showing","text":"MATLAB changed uitables internal implementation, hence findjobj (File Exchange function) broke causing reorderableListbox (File Exchange function) to also break. An updated findjobj has been added to the calciumImagingAnalysis repository and this error (see below) should no longer occur. Error in reorderableListbox (line 127) jScrollPane = jScrollPane(1);","title":"modelPreprocessMovie analysis options list not showing"},{"location":"help_issues/#miji-not-loading-correctly","text":"The below error occurs when the wrong version of Fiji is downloaded. Please 2015 December 22 version download from https://imagej.net/Fiji/Downloads as that implementation of Miji.m appears to work correctly with MATLAB. @@@@@@@ Error using javaObject No class MIJ can be located on the Java class path","title":"Miji not loading correctly"},{"location":"help_issues/#viewmovie-or-other-functions-where-movies-need-to-be-loaded-end-without-executing","text":"It is likely that the regular expression given to calciumImagingAnalysis does not match any of the files in the folder being analyzed. For example, in viewMovie , the below Image movie regexp setting should be changed to concat correspond to the demo raw imaging data's name.","title":"viewMovie or other functions where movies need to be loaded end without executing"},{"location":"help_issues/#contrast-is-low-on-cell-transient-ff-movies-using-computemanualsortsignals","text":"The contrast (e.g. min/max) are estimated automatically from movie data, but will not always be the optimal display for manual human sorting of data. To improve the contrast, press q while in the interface and adjust the min/max values until you are in a satisfactory range. See below. Default contrast: Contrast after user editing:","title":"Contrast is low on cell transient \u0394F/F movies using computeManualSortSignals"},{"location":"help_issues/#traces-in-computemanualsortsignals-gui-are-flat","text":"Likely this is due to one of the traces having values that are very high, throwing off the estimate used set the y-axis in the GUI (which is constant across all candidate cells). This can be changed by pressing w , see below.","title":"Traces in computeManualSortSignals GUI are flat."},{"location":"help_issues/#cant-see-transients","text":"","title":"Can't see transients."},{"location":"help_issues/#change-the-minmax","text":"","title":"Change the min/max."},{"location":"help_issues/#can-now-see-transients","text":"","title":"Can now see transients."},{"location":"help_issues/#blank-frames-or-entire-frames-have-baseline-shifted-after-motion-correction-in-modelpreprocessmovie","text":"This normally occurs when transfturboreg is selected as the registrationFxn , in some Windows editions and OSX versions this leads to random baseline shifts. If this occurs change registrationFxn to imtransform . See below (green selected option).","title":"Blank frames or entire frames have baseline shifted after motion correction in modelPreprocessMovie"},{"location":"help_issues/#file-or-folder-dialog-box-with-no-instructions","text":"This is mainly on OS X , where in some versions the dialog boxes are not styled with title bars (see below). This is outside of MATLAB's control. If this occurs, check the command window as the instructions should also be provided there (e.g. with Dialog box: [TITLE] style text).","title":"File or folder dialog box with no instructions"},{"location":"help_large_movie_analysis/","text":"Analyzing large movies \u00b6 Some movies are larger than the available RAM on users analysis computer. Below are several ways that the underlying functions in CIAPKG can be used to analyze large movies. Playing large movies from disk \u00b6 To directly and quickly visualize large or long movies from disk, directly input the movie path into playMovie as below. % Full path to the movie inputMoviePath = 'path/to/movie.h5'; playMovie(inputMoviePath); Which will produce a GUI as below that will play the movie back. ROI signal extraction \u00b6 The below code is an example ROI signal extraction for large movie in chunks from disk after analyzing a small chunk with PCA-ICA to obtain reference masks. Modify inputMoviePath to a full path to your movie (HDF5, TIF, AVI, and ISXD supported). % Full path to the movie inputMoviePath = 'path/to/movie.h5'; %% =======PCA-ICA % Run PCA-ICA on only a subset of frames. % OPTIONS % Vector of frames to analyze for PCA-ICA framesToAnalyzePcaIca = 1:300; % Number of PCs and ICs to request nPCs = 250; nICs = 200; [pcaicaAnalysisOutput] = ciapkg.signal_extraction.runPcaIca(inputMoviePath,nPCs,nICs,'frameList',framesToAnalyzePcaIca,'mu',0.1,'max_iter',1e3); %% =======ROI extraction new version % OPTIONS % Number of frames to chunk from movie when doing ROI estimation, to reduce RAM usage. movieChunks = 100; % Normal PCA-ICA, binary masks [roiSignals, ~] = ciapkg.signal_extraction.computeSignalsFromImages(pcaicaAnalysisOutput.IcaFilters,inputMoviePath,'frameList',[],'readMovieChunks',1,'threshold',0.4,'nFramesPerChunk',movieChunks,'weightSignalByImage',0); % Weighted PCA-ICA, trace based on weighted pixel values of eahc ROI [roiSignalsWeighted, ~] = ciapkg.signal_extraction.computeSignalsFromImages(pcaicaAnalysisOutput.IcaFilters,inputMoviePath,'frameList',[],'readMovieChunks',1,'threshold',0.4,'nFramesPerChunk',movieChunks,'weightSignalByImage',1);","title":"Large movie analysis"},{"location":"help_large_movie_analysis/#analyzing-large-movies","text":"Some movies are larger than the available RAM on users analysis computer. Below are several ways that the underlying functions in CIAPKG can be used to analyze large movies.","title":"Analyzing large movies"},{"location":"help_large_movie_analysis/#playing-large-movies-from-disk","text":"To directly and quickly visualize large or long movies from disk, directly input the movie path into playMovie as below. % Full path to the movie inputMoviePath = 'path/to/movie.h5'; playMovie(inputMoviePath); Which will produce a GUI as below that will play the movie back.","title":"Playing large movies from disk"},{"location":"help_large_movie_analysis/#roi-signal-extraction","text":"The below code is an example ROI signal extraction for large movie in chunks from disk after analyzing a small chunk with PCA-ICA to obtain reference masks. Modify inputMoviePath to a full path to your movie (HDF5, TIF, AVI, and ISXD supported). % Full path to the movie inputMoviePath = 'path/to/movie.h5'; %% =======PCA-ICA % Run PCA-ICA on only a subset of frames. % OPTIONS % Vector of frames to analyze for PCA-ICA framesToAnalyzePcaIca = 1:300; % Number of PCs and ICs to request nPCs = 250; nICs = 200; [pcaicaAnalysisOutput] = ciapkg.signal_extraction.runPcaIca(inputMoviePath,nPCs,nICs,'frameList',framesToAnalyzePcaIca,'mu',0.1,'max_iter',1e3); %% =======ROI extraction new version % OPTIONS % Number of frames to chunk from movie when doing ROI estimation, to reduce RAM usage. movieChunks = 100; % Normal PCA-ICA, binary masks [roiSignals, ~] = ciapkg.signal_extraction.computeSignalsFromImages(pcaicaAnalysisOutput.IcaFilters,inputMoviePath,'frameList',[],'readMovieChunks',1,'threshold',0.4,'nFramesPerChunk',movieChunks,'weightSignalByImage',0); % Weighted PCA-ICA, trace based on weighted pixel values of eahc ROI [roiSignalsWeighted, ~] = ciapkg.signal_extraction.computeSignalsFromImages(pcaicaAnalysisOutput.IcaFilters,inputMoviePath,'frameList',[],'readMovieChunks',1,'threshold',0.4,'nFramesPerChunk',movieChunks,'weightSignalByImage',1);","title":"ROI signal extraction"},{"location":"help_manual_cell_sorting/","text":"Manual cell sorting of cell extraction outputs \u00b6 This page will go over best practices and common issues seen when sorting cells from PCA-ICA. Advice can also apply to other cell sorting algorithms (CNMF, etc.). As a general note, it is a bad idea to bias users by using heuristics or computational models to pre-select or guess whether a cell extraction output is a cell or non-cell. This will skew results toward whatever the heuristics or model are looking for rather than reveal the true preferences of the user. Usage \u00b6 Usage instructions below for signalSorter.m : Main inputs inputImages - [x y N] matrix where N = number of images, x/y are dimensions. inputSignals - [N frames] double matrix where N = number of signals (traces). inputMovie - [x y frames] matrix Main outputs choices - [N 1] vector of 1 = cell, 0 = not a cell inputImagesSorted - [x y N] filtered by `choices' inputSignalsSorted - [N frames] filtered by choice iopts.inputMovie = inputMovie; % movie associated with traces iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [inputImagesSorted, inputSignalsSorted, choices] = signalSorter(inputImages, inputSignals, 'options',iopts); signalSorter use with large or remote server imaging movies \u00b6 For imaging movies that are too large to fit into RAM or that are stored on remote systems, run the below commands. Remember to change inputImages , inputSignals , iopts.inputMovie , and iopts.inputDatasetName to values appropriate for your data). Note: only HDF5 files are supported with this feature due to use of spatial chunking. % CRITICAL USER PARAMETERS % Input images and signals, change from PCA-ICA to whatever is appropriate for input from user's cell extraction algorithm. inputImages = pcaicaAnalysisOutput.IcaFilters; % cell array of [x y nSignals] matrices containing each set of images corresponding to inputSignals objects. inputSignals = pcaicaAnalysisOutput.IcaTraces; % cell array of [nSignals frames] matrices containing each set of inputImages signals. iopts.inputMovie = ['pathToImagingSessionFolder' filesep 'MOVIE_FILE_NAME.h5']; iopts.inputDatasetName = '/1'; % HDF5 dataset name % MAIN USER parameters: change these as needed iopts.preComputeImageCutMovies = 0; % Binary: 0 recommended. 1 = pre-compute movies aligned to signal transients, 0 = do not pre-compute. iopts.readMovieChunks = 1; % Binary: 1 recommended. 1 = read movie from HDD, 0 = load entire movie into RAM. iopts.showImageCorrWithCharInputMovie = 0; % Binary: 0 recommended. 1 = show the image correlation value when input path to options.inputMovie (e.g. when not loading entire movie into RAM). iopts.maxSignalsToShow = 9; %Int: max movie cut images to show iopts.nSignalsLoadAsync = 30; % Int: number of signals ahead of current to asynchronously load imageCutMovies, might make the first couple signal selections slow while loading takes place iopts.threshold = 0.3; % threshold for thresholding images iopts.thresholdOutline = 0.3; % threshold for thresholding images % OPTIONAL iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [~, ~, choices] = signalSorter(inputImages, inputSignals, 'options',iopts); Interface \u00b6 GUI also contains a shortcut menu that users can access by right-clicking or selecting the top-left menu. Example good cell extraction output Example bad cell extraction output Jump to arbitrary cells - Click the cell map window or press V and a orange cross hair will appear, this will take the user to the clicked upon cell. - Or select the full cellmap, will obtain the same result. - This cell can be viewed like normal. - Users can then press Y to take them back to the last sorted cell (here #2). This function works even with the G go to new signal via index number command. Press \"t\" to bring up interface to compare neighboring cells Users can zoom in on the traces to get a better sense of correlation between activity traces. Press \"r\" to bring up different views of trace - ROI trace included in instances where the entire movie is already loaded into RAM. Press \"c\" to bring up the whole movie cut to extraction output activity trace events Best practices \u00b6 Always sort the cells with the trace, filter, and either images or video cut to transients in the movie. This gets around two types of cells: those with irregular firing patterns that might be thrown out (see below) or those whose filter and traces look good, but are either fragments of a high SNR cell (see Common issues ) or not actually a cell (e.g. a particulate in the field of view that has transient-like movement). Sometimes two or more cell extraction outputs are for the same cell. In these suspected cases, press t in the signalSorter interface to pull up images and activity traces of nearby cells to see which have a higher SNR or better cell shape and should be kept. Neighboring cells \u00b6 Sometimes two or more cell extraction outputs are for the same cell. In these suspected cases, press t in the signalSorter interface to pull up images and activity traces of nearby cells to see which have a higher SNR or better cell shape and should be kept. See below for an example, in which cell #3 (yellow) is a duplicate of cell #1 (blue). Common issues \u00b6 Cells with high SNR will sometimes be split into multiple cell extraction outputs. Refer to algorithm specific to notes on how to get around this problem. Examples \u00b6 Example of a good cell with GCaMP like rise/decay and for one-photon miniature microscope movies, has nice 2D Gaussian-like shape during transients in the movie. Example of good cells on left and bad on right. Subplots: CELLMax output, mean movie frame centered on the cell and aligned to cell transients, and example CELLMax traces. Example of not-cells or borderline not-cells. Good cells with their matched movies aligned to algorithm (PCA-ICA in this case) detected transients. Additional examples of good cells. As noted, without the transient aligned movie (see above), cells with unusual traces might be discarded, e.g. all three below are actual cells when the movie is visualized.","title":"Manual cell sorting"},{"location":"help_manual_cell_sorting/#manual-cell-sorting-of-cell-extraction-outputs","text":"This page will go over best practices and common issues seen when sorting cells from PCA-ICA. Advice can also apply to other cell sorting algorithms (CNMF, etc.). As a general note, it is a bad idea to bias users by using heuristics or computational models to pre-select or guess whether a cell extraction output is a cell or non-cell. This will skew results toward whatever the heuristics or model are looking for rather than reveal the true preferences of the user.","title":"Manual cell sorting of cell extraction outputs"},{"location":"help_manual_cell_sorting/#usage","text":"Usage instructions below for signalSorter.m : Main inputs inputImages - [x y N] matrix where N = number of images, x/y are dimensions. inputSignals - [N frames] double matrix where N = number of signals (traces). inputMovie - [x y frames] matrix Main outputs choices - [N 1] vector of 1 = cell, 0 = not a cell inputImagesSorted - [x y N] filtered by `choices' inputSignalsSorted - [N frames] filtered by choice iopts.inputMovie = inputMovie; % movie associated with traces iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [inputImagesSorted, inputSignalsSorted, choices] = signalSorter(inputImages, inputSignals, 'options',iopts);","title":"Usage"},{"location":"help_manual_cell_sorting/#signalsorter-use-with-large-or-remote-server-imaging-movies","text":"For imaging movies that are too large to fit into RAM or that are stored on remote systems, run the below commands. Remember to change inputImages , inputSignals , iopts.inputMovie , and iopts.inputDatasetName to values appropriate for your data). Note: only HDF5 files are supported with this feature due to use of spatial chunking. % CRITICAL USER PARAMETERS % Input images and signals, change from PCA-ICA to whatever is appropriate for input from user's cell extraction algorithm. inputImages = pcaicaAnalysisOutput.IcaFilters; % cell array of [x y nSignals] matrices containing each set of images corresponding to inputSignals objects. inputSignals = pcaicaAnalysisOutput.IcaTraces; % cell array of [nSignals frames] matrices containing each set of inputImages signals. iopts.inputMovie = ['pathToImagingSessionFolder' filesep 'MOVIE_FILE_NAME.h5']; iopts.inputDatasetName = '/1'; % HDF5 dataset name % MAIN USER parameters: change these as needed iopts.preComputeImageCutMovies = 0; % Binary: 0 recommended. 1 = pre-compute movies aligned to signal transients, 0 = do not pre-compute. iopts.readMovieChunks = 1; % Binary: 1 recommended. 1 = read movie from HDD, 0 = load entire movie into RAM. iopts.showImageCorrWithCharInputMovie = 0; % Binary: 0 recommended. 1 = show the image correlation value when input path to options.inputMovie (e.g. when not loading entire movie into RAM). iopts.maxSignalsToShow = 9; %Int: max movie cut images to show iopts.nSignalsLoadAsync = 30; % Int: number of signals ahead of current to asynchronously load imageCutMovies, might make the first couple signal selections slow while loading takes place iopts.threshold = 0.3; % threshold for thresholding images iopts.thresholdOutline = 0.3; % threshold for thresholding images % OPTIONAL iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [~, ~, choices] = signalSorter(inputImages, inputSignals, 'options',iopts);","title":"signalSorter use with large or remote server imaging movies"},{"location":"help_manual_cell_sorting/#interface","text":"GUI also contains a shortcut menu that users can access by right-clicking or selecting the top-left menu. Example good cell extraction output Example bad cell extraction output Jump to arbitrary cells - Click the cell map window or press V and a orange cross hair will appear, this will take the user to the clicked upon cell. - Or select the full cellmap, will obtain the same result. - This cell can be viewed like normal. - Users can then press Y to take them back to the last sorted cell (here #2). This function works even with the G go to new signal via index number command. Press \"t\" to bring up interface to compare neighboring cells Users can zoom in on the traces to get a better sense of correlation between activity traces. Press \"r\" to bring up different views of trace - ROI trace included in instances where the entire movie is already loaded into RAM. Press \"c\" to bring up the whole movie cut to extraction output activity trace events","title":"Interface"},{"location":"help_manual_cell_sorting/#best-practices","text":"Always sort the cells with the trace, filter, and either images or video cut to transients in the movie. This gets around two types of cells: those with irregular firing patterns that might be thrown out (see below) or those whose filter and traces look good, but are either fragments of a high SNR cell (see Common issues ) or not actually a cell (e.g. a particulate in the field of view that has transient-like movement). Sometimes two or more cell extraction outputs are for the same cell. In these suspected cases, press t in the signalSorter interface to pull up images and activity traces of nearby cells to see which have a higher SNR or better cell shape and should be kept.","title":"Best practices"},{"location":"help_manual_cell_sorting/#neighboring-cells","text":"Sometimes two or more cell extraction outputs are for the same cell. In these suspected cases, press t in the signalSorter interface to pull up images and activity traces of nearby cells to see which have a higher SNR or better cell shape and should be kept. See below for an example, in which cell #3 (yellow) is a duplicate of cell #1 (blue).","title":"Neighboring cells"},{"location":"help_manual_cell_sorting/#common-issues","text":"Cells with high SNR will sometimes be split into multiple cell extraction outputs. Refer to algorithm specific to notes on how to get around this problem.","title":"Common issues"},{"location":"help_manual_cell_sorting/#examples","text":"Example of a good cell with GCaMP like rise/decay and for one-photon miniature microscope movies, has nice 2D Gaussian-like shape during transients in the movie. Example of good cells on left and bad on right. Subplots: CELLMax output, mean movie frame centered on the cell and aligned to cell transients, and example CELLMax traces. Example of not-cells or borderline not-cells. Good cells with their matched movies aligned to algorithm (PCA-ICA in this case) detected transients. Additional examples of good cells. As noted, without the transient aligned movie (see above), cells with unusual traces might be discarded, e.g. all three below are actual cells when the movie is visualized.","title":"Examples"},{"location":"help_motion_correction/","text":"Scripts to register movies to remove motion. Calculating final transformation after multiple registration iterations. \u00b6 It is possible to use the output from motion correction (often done with turboregMovie or modelPreprocessMovieFunction ) to transform the movie at later times if needed. There are two ways to do this: iteratively perform each motion correction step (e.g. same order as in modelPreprocessMovieFunction ) or create the translation/skew/rotation matrices for each step using ResultsOutOriginal and combine for all iterations as totalTranformMatrix = (R2'*S2'*T2'*R1'*S1'*T1')' . Note the order matters. - Where 1, 2, ... indicate matrix for iterations 1,2,... and R, S, T are rotation, skew (shear + scale) and translation matrices, respectively. - For 3 iterations would be (R3'*S3'*T3'*R2'*S2'*T2'*R1'*S1'*T1')' or alternatively T1*S1*R1*T3*S3*R2*T3*S3*R3 . - For translation/rotation matrices, use definitions in https://www.mathworks.com/help/images/matrix-representation-of-geometric-transformations.html to construct them. Turboreg \u00b6 Compiling turboreg and transfturboreg mex file \u00b6 Can compile on your system using the following command mex('-v', '-largeArrayDims','-I.', 'turboreg.c','.\\BsplnTrf.c','.\\BsplnWgt.c','.\\convolve.c','.\\getPut.c','.\\main.c','.\\phil.c','.\\pyrFilt.c','.\\pyrGetSz.c','.\\quant.c','.\\reg0.c','.\\reg1.c','.\\reg2.c','.\\reg3.c','.\\regFlt3d.c','.\\svdcmp.c') mex('-v', '-largeArrayDims','-I.', 'transfturboreg.c','.\\BsplnTrf.c','.\\BsplnWgt.c','.\\convolve.c','.\\getPut.c','.\\main.c','.\\phil.c','.\\pyrFilt.c','.\\pyrGetSz.c','.\\quant.c','.\\reg0.c','.\\reg1.c','.\\reg2.c','.\\reg3.c','.\\regFlt3d.c','.\\svdcmp.c') For Linux users: http://www.walkingrandomly.com/?p=2694 mex('-v', 'GCC=\"/usr/bin/gcc-4.9\"', '-largeArrayDims','CFLAGS=\"\\$CFLAGS -std=c99\"','-I.', 'turboreg.c','./BsplnTrf.c','./BsplnWgt.c','./convolve.c','./getPut.c','./main.c','./phil.c','./pyrFilt.c','./pyrGetSz.c','./quant.c','./reg0.c','./reg1.c','./reg2.c','./reg3.c','./regFlt3d.c','./svdcmp.c') mex('-v', 'GCC=\"/usr/bin/gcc-4.9\"', '-largeArrayDims','CFLAGS=\"\\$CFLAGS -std=c99\"','-I.', 'transfturboreg.c','./BsplnTrf.c','./BsplnWgt.c','./convolve.c','./getPut.c','./main.c','./phil.c','./pyrFilt.c','./pyrGetSz.c','./quant.c','./reg0.c','./reg1.c','./reg2.c','./reg3.c','./regFlt3d.c','./svdcmp.c') Below is an example usage of turboregMovie . To use imageJ in Matlab, download Fiji ( http://fiji.sc ) and add Miji.m to your filepath, see http://fiji.sc/Miji . Running turboreg \u00b6 Note this input was from 2017.04.19 update % set turboreg options ioptions.inputDatasetName = '/1'; ioptions.turboregRotation = 0; ioptions.RegisType = 1; ioptions.parallel = 1; ioptions.meanSubtract = 1; ioptions.normalizeType = 'bandpass'; % matlabDisk is alternative input. Done on input to turboreg but NOT on final movie. ioptions.registrationFxn = 'transfturboreg'; ioptions.normalizeBeforeRegister = 'divideByLowpass'; % set to blank if don't want any filtering on output movie ioptions.imagejFFTLarge = 10000; ioptions.imagejFFTSmall = 80; ioptions.saveNormalizeBeforeRegister = []; ioptions.cropCoords = []; ioptions.closeMatlabPool = 0; ioptions.refFrame = 1; ioptions.refFrameMatrix = []; % load the movie and run turboreg inputMovieMatrix = loadMovieList('data\\2014_04_01_p203_m19_check01\\concat_recording_20140401_180333.h5'); regMovie = turboregMovie(inputMovieMatrix,'options',ioptions); % or run turboreg function by loading movie directly within function regMovie = turboregMovie('pathToDir\\filename.h5','options',ioptions); Old input \u00b6 ioptions.inputDatasetName = '/1'; ioptions.turboregRotation = 1; ioptions.RegisType = 1; ioptions.parallel = 1; ioptions.meanSubtract = 1; ioptions.normalizeType = 'divideByLowpass'; ioptions.registrationFxn = 'transfturboreg'; ioptions.normalizeBeforeRegister = 'imagejFFT'; ioptions.imagejFFTLarge = 10000; ioptions.imagejFFTSmall = 80; ioptions.saveNormalizeBeforeRegister = []; ioptions.cropCoords = []; ioptions.closeMatlabPool = 0; ioptions.refFrame = 1; ioptions.refFrameMatrix = []; regMovie = turboregMovie('pathToDir\\filename.h5','options',ioptions); % OR regMovie = turboregMovie(inputMovieMatrix,'options',ioptions);","title":"Motion correction"},{"location":"help_motion_correction/#calculating-final-transformation-after-multiple-registration-iterations","text":"It is possible to use the output from motion correction (often done with turboregMovie or modelPreprocessMovieFunction ) to transform the movie at later times if needed. There are two ways to do this: iteratively perform each motion correction step (e.g. same order as in modelPreprocessMovieFunction ) or create the translation/skew/rotation matrices for each step using ResultsOutOriginal and combine for all iterations as totalTranformMatrix = (R2'*S2'*T2'*R1'*S1'*T1')' . Note the order matters. - Where 1, 2, ... indicate matrix for iterations 1,2,... and R, S, T are rotation, skew (shear + scale) and translation matrices, respectively. - For 3 iterations would be (R3'*S3'*T3'*R2'*S2'*T2'*R1'*S1'*T1')' or alternatively T1*S1*R1*T3*S3*R2*T3*S3*R3 . - For translation/rotation matrices, use definitions in https://www.mathworks.com/help/images/matrix-representation-of-geometric-transformations.html to construct them.","title":"Calculating final transformation after multiple registration iterations."},{"location":"help_motion_correction/#turboreg","text":"","title":"Turboreg"},{"location":"help_motion_correction/#compiling-turboreg-and-transfturboreg-mex-file","text":"Can compile on your system using the following command mex('-v', '-largeArrayDims','-I.', 'turboreg.c','.\\BsplnTrf.c','.\\BsplnWgt.c','.\\convolve.c','.\\getPut.c','.\\main.c','.\\phil.c','.\\pyrFilt.c','.\\pyrGetSz.c','.\\quant.c','.\\reg0.c','.\\reg1.c','.\\reg2.c','.\\reg3.c','.\\regFlt3d.c','.\\svdcmp.c') mex('-v', '-largeArrayDims','-I.', 'transfturboreg.c','.\\BsplnTrf.c','.\\BsplnWgt.c','.\\convolve.c','.\\getPut.c','.\\main.c','.\\phil.c','.\\pyrFilt.c','.\\pyrGetSz.c','.\\quant.c','.\\reg0.c','.\\reg1.c','.\\reg2.c','.\\reg3.c','.\\regFlt3d.c','.\\svdcmp.c') For Linux users: http://www.walkingrandomly.com/?p=2694 mex('-v', 'GCC=\"/usr/bin/gcc-4.9\"', '-largeArrayDims','CFLAGS=\"\\$CFLAGS -std=c99\"','-I.', 'turboreg.c','./BsplnTrf.c','./BsplnWgt.c','./convolve.c','./getPut.c','./main.c','./phil.c','./pyrFilt.c','./pyrGetSz.c','./quant.c','./reg0.c','./reg1.c','./reg2.c','./reg3.c','./regFlt3d.c','./svdcmp.c') mex('-v', 'GCC=\"/usr/bin/gcc-4.9\"', '-largeArrayDims','CFLAGS=\"\\$CFLAGS -std=c99\"','-I.', 'transfturboreg.c','./BsplnTrf.c','./BsplnWgt.c','./convolve.c','./getPut.c','./main.c','./phil.c','./pyrFilt.c','./pyrGetSz.c','./quant.c','./reg0.c','./reg1.c','./reg2.c','./reg3.c','./regFlt3d.c','./svdcmp.c') Below is an example usage of turboregMovie . To use imageJ in Matlab, download Fiji ( http://fiji.sc ) and add Miji.m to your filepath, see http://fiji.sc/Miji .","title":"Compiling turboreg and transfturboreg mex file"},{"location":"help_motion_correction/#running-turboreg","text":"Note this input was from 2017.04.19 update % set turboreg options ioptions.inputDatasetName = '/1'; ioptions.turboregRotation = 0; ioptions.RegisType = 1; ioptions.parallel = 1; ioptions.meanSubtract = 1; ioptions.normalizeType = 'bandpass'; % matlabDisk is alternative input. Done on input to turboreg but NOT on final movie. ioptions.registrationFxn = 'transfturboreg'; ioptions.normalizeBeforeRegister = 'divideByLowpass'; % set to blank if don't want any filtering on output movie ioptions.imagejFFTLarge = 10000; ioptions.imagejFFTSmall = 80; ioptions.saveNormalizeBeforeRegister = []; ioptions.cropCoords = []; ioptions.closeMatlabPool = 0; ioptions.refFrame = 1; ioptions.refFrameMatrix = []; % load the movie and run turboreg inputMovieMatrix = loadMovieList('data\\2014_04_01_p203_m19_check01\\concat_recording_20140401_180333.h5'); regMovie = turboregMovie(inputMovieMatrix,'options',ioptions); % or run turboreg function by loading movie directly within function regMovie = turboregMovie('pathToDir\\filename.h5','options',ioptions);","title":"Running turboreg"},{"location":"help_motion_correction/#old-input","text":"ioptions.inputDatasetName = '/1'; ioptions.turboregRotation = 1; ioptions.RegisType = 1; ioptions.parallel = 1; ioptions.meanSubtract = 1; ioptions.normalizeType = 'divideByLowpass'; ioptions.registrationFxn = 'transfturboreg'; ioptions.normalizeBeforeRegister = 'imagejFFT'; ioptions.imagejFFTLarge = 10000; ioptions.imagejFFTSmall = 80; ioptions.saveNormalizeBeforeRegister = []; ioptions.cropCoords = []; ioptions.closeMatlabPool = 0; ioptions.refFrame = 1; ioptions.refFrameMatrix = []; regMovie = turboregMovie('pathToDir\\filename.h5','options',ioptions); % OR regMovie = turboregMovie(inputMovieMatrix,'options',ioptions);","title":"Old input"},{"location":"help_snr/","text":"Preprocessing: Improving SNR \u00b6 This relates to methods within the calciumImagingAnalysis class for checking \u0394F/F during cell sorting and ways to improve SNR (esp. in miniscope movies), also see Preprocessing:-Spatial-filtering . Movie cell ROI trace during cell sorting \u00b6 If users press r while in the interface, it will show users a ROI calculated trace (which will contain more cross-talk, but will give you a direct measure of \u0394F/F from your movie compared to ICA/CNMF-E/etc. traces. Spatial filtering during modelPreprocessMovie preprocessing \u00b6 The other is that in the modelPreprocessMovie preprocessing module, when you are on the 1st page of the options, in the filterBeforeRegister setting select matlab divide by lowpass before registering or matlab bandpass before registering . See also the spatial filtering wiki page: https://github.com/bahanonu/calciumImagingAnalysis/wiki/Preprocessing:-Spatial-filtering#dark-halos-around-cells . viewMovieRegistrationTest \u00b6 To get a feel for how the different filtering affects SNR/movie data, run viewMovieRegistrationTest module and select either matlab divide by lowpass before registering or matlab bandpass before registering then change filterBeforeRegFreqLow and filterBeforeRegFreqHigh settings, see below. You'll get an output like the below (top left is without any filtering, other 3 are with different bandpass filtering options). Cell \u0394F/F intensity profile from the raw movie Same cell \u0394F/F intensity profile from the bottom/left movie (not the y-axis is the same as above):","title":"Improving signal-to-noise"},{"location":"help_snr/#preprocessing-improving-snr","text":"This relates to methods within the calciumImagingAnalysis class for checking \u0394F/F during cell sorting and ways to improve SNR (esp. in miniscope movies), also see Preprocessing:-Spatial-filtering .","title":"Preprocessing: Improving SNR"},{"location":"help_snr/#movie-cell-roi-trace-during-cell-sorting","text":"If users press r while in the interface, it will show users a ROI calculated trace (which will contain more cross-talk, but will give you a direct measure of \u0394F/F from your movie compared to ICA/CNMF-E/etc. traces.","title":"Movie cell ROI trace during cell sorting"},{"location":"help_snr/#spatial-filtering-during-modelpreprocessmovie-preprocessing","text":"The other is that in the modelPreprocessMovie preprocessing module, when you are on the 1st page of the options, in the filterBeforeRegister setting select matlab divide by lowpass before registering or matlab bandpass before registering . See also the spatial filtering wiki page: https://github.com/bahanonu/calciumImagingAnalysis/wiki/Preprocessing:-Spatial-filtering#dark-halos-around-cells .","title":"Spatial filtering during modelPreprocessMovie preprocessing"},{"location":"help_snr/#viewmovieregistrationtest","text":"To get a feel for how the different filtering affects SNR/movie data, run viewMovieRegistrationTest module and select either matlab divide by lowpass before registering or matlab bandpass before registering then change filterBeforeRegFreqLow and filterBeforeRegFreqHigh settings, see below. You'll get an output like the below (top left is without any filtering, other 3 are with different bandpass filtering options). Cell \u0394F/F intensity profile from the raw movie Same cell \u0394F/F intensity profile from the bottom/left movie (not the y-axis is the same as above):","title":"viewMovieRegistrationTest"},{"location":"help_spatial_filtering/","text":"Movie Filtering \u00b6 This page documents different functions in the repository variable for filtering (spatial high/low/bandpass) movies to remove neuropil, cells, or other features. \u00b6 options.freqLow = 1; options.freqHigh = 4; inputMovie = normalizeMovie(single(inputMovie),'normalizationType','lowpassFFTDivisive','freqLow',options.freqLow,'freqHigh',options.freqHigh,'waitbarOn',1,'bandpassMask','gaussian'); Images from unit test \u00b6 Main filtering functions. \u00b6 Below is a screen grab from a random frame using all the filtering functions. A nice way to quickly see the many differences between each functions filtering. Test function filtering \u00b6 This is currently only for the Matlab fft, but I'll see about expanding to others. unitNormalizeMovie; Matlab test function \u00b6 I've also added the ability to test the parameter space of the Matlab fft, use the below command. testMovieFFT = normalizeMovie(testMovie,'normalizationType','matlabFFT_test','secondaryNormalizationType','lowpassFFTDivisive','bandpassMask','gaussian','bandpassType','lowpass'); Should get a movie output similar to the below, where there is the original movie, the FFT movie, the original/FFT movie, and the dfof of original/FFT movie. Matlab test function movie output \u00b6 Similar to above, showing results when using lowpassFFTDivisive normalization ( matlab divide by lowpass before registering in modelPreprocessMovie and viewMovieRegistrationTest functions) with freqLow = 0 and freqHigh set to 1 , 4 , and 20 . This corresponds to removing increasingly smaller features from the movie. ImageJ test function \u00b6 To test the ImageJ FFT and determine the best parameters for a given set of movies, run the following function on a test movie matrix: inputMovieTest = normalizeMovie(inputMovie,'normalizationType','imagejFFT_test'); The output should look like the below: Common Issues \u00b6 A list of some common issues. Dark halos around cells \u00b6 If the spatial filter is not properly configured then dark halos will appear around high SNR cells, potentially obscuring nearby, low SNR cells. https://github.com/schnitzer-lab/miniscope_analysis/pull/30 * FYI, for 4x downsampled movies, highFreq parameter of 4 (which corresponds to a fspecial gaussian with std of 4) produces the closest results to ImageJ Process->FFT->Bandpass Filter... with inputs of filter_large=10000 filter_small=80 suppress=None tolerance=5 (the current default in normalizeMovie ). Example frame from ImageJ and Matlab FFTs. Distribution of pixel differences between ImageJ and Matlab FFT movies. This matches the filter that ImageJ says it uses, which is fairly close to the Matlab filter. Example video: 2015_11_25_p384_m610_openfield01 * Below is an example comparison using the following Matlab commands to produce the filtered inputs: testMovieFFT = normalizeMovie(testMovie,'normalizationType','lowpassFFTDivisive','freqHigh',7); testMovieFFTImageJ = normalizeMovie(testMovie,'normalizationType','imagejFFT'); diffMovie = testMovieFFT-testMovieFFTImageJ ; With some tweaking of the freqHigh and other parameters, should hopefully be able to get closer to macheps and say that the two are identical for our purposes. This is the histogram of the difference movie (Matlab - ImageJ). Notice most of the values are centered around zero with stdev ~0.2% df/f.","title":"Spatial filtering"},{"location":"help_spatial_filtering/#movie-filtering","text":"This page documents different functions in the repository variable for filtering (spatial high/low/bandpass) movies to remove neuropil, cells, or other features.","title":"Movie Filtering"},{"location":"help_spatial_filtering/#_1","text":"options.freqLow = 1; options.freqHigh = 4; inputMovie = normalizeMovie(single(inputMovie),'normalizationType','lowpassFFTDivisive','freqLow',options.freqLow,'freqHigh',options.freqHigh,'waitbarOn',1,'bandpassMask','gaussian');","title":""},{"location":"help_spatial_filtering/#images-from-unit-test","text":"","title":"Images from unit test"},{"location":"help_spatial_filtering/#main-filtering-functions","text":"Below is a screen grab from a random frame using all the filtering functions. A nice way to quickly see the many differences between each functions filtering.","title":"Main filtering functions."},{"location":"help_spatial_filtering/#test-function-filtering","text":"This is currently only for the Matlab fft, but I'll see about expanding to others. unitNormalizeMovie;","title":"Test function filtering"},{"location":"help_spatial_filtering/#matlab-test-function","text":"I've also added the ability to test the parameter space of the Matlab fft, use the below command. testMovieFFT = normalizeMovie(testMovie,'normalizationType','matlabFFT_test','secondaryNormalizationType','lowpassFFTDivisive','bandpassMask','gaussian','bandpassType','lowpass'); Should get a movie output similar to the below, where there is the original movie, the FFT movie, the original/FFT movie, and the dfof of original/FFT movie.","title":"Matlab test function"},{"location":"help_spatial_filtering/#matlab-test-function-movie-output","text":"Similar to above, showing results when using lowpassFFTDivisive normalization ( matlab divide by lowpass before registering in modelPreprocessMovie and viewMovieRegistrationTest functions) with freqLow = 0 and freqHigh set to 1 , 4 , and 20 . This corresponds to removing increasingly smaller features from the movie.","title":"Matlab test function movie output"},{"location":"help_spatial_filtering/#imagej-test-function","text":"To test the ImageJ FFT and determine the best parameters for a given set of movies, run the following function on a test movie matrix: inputMovieTest = normalizeMovie(inputMovie,'normalizationType','imagejFFT_test'); The output should look like the below:","title":"ImageJ test function"},{"location":"help_spatial_filtering/#common-issues","text":"A list of some common issues.","title":"Common Issues"},{"location":"help_spatial_filtering/#dark-halos-around-cells","text":"If the spatial filter is not properly configured then dark halos will appear around high SNR cells, potentially obscuring nearby, low SNR cells. https://github.com/schnitzer-lab/miniscope_analysis/pull/30 * FYI, for 4x downsampled movies, highFreq parameter of 4 (which corresponds to a fspecial gaussian with std of 4) produces the closest results to ImageJ Process->FFT->Bandpass Filter... with inputs of filter_large=10000 filter_small=80 suppress=None tolerance=5 (the current default in normalizeMovie ). Example frame from ImageJ and Matlab FFTs. Distribution of pixel differences between ImageJ and Matlab FFT movies. This matches the filter that ImageJ says it uses, which is fairly close to the Matlab filter. Example video: 2015_11_25_p384_m610_openfield01 * Below is an example comparison using the following Matlab commands to produce the filtered inputs: testMovieFFT = normalizeMovie(testMovie,'normalizationType','lowpassFFTDivisive','freqHigh',7); testMovieFFTImageJ = normalizeMovie(testMovie,'normalizationType','imagejFFT'); diffMovie = testMovieFFT-testMovieFFTImageJ ; With some tweaking of the freqHigh and other parameters, should hopefully be able to get closer to macheps and say that the two are identical for our purposes. This is the histogram of the difference movie (Matlab - ImageJ). Notice most of the values are centered around zero with stdev ~0.2% df/f.","title":"Dark halos around cells"},{"location":"help_stripe_removal/","text":"Stripe removal from movies \u00b6 Some cameras will produce vertical and/or horizontal stripes in the movies that users will want to remove. Below is an example of process to remove strip from movies. The underlying function is removeStripsFromMovie and users can remove using modelPreprocessMovie module in the calciumImagingAnalysis class. Vertical and horizontal stripes can be removed with the vertical and horizontal aspect of the the Fourier spectrum. In my default implementation for users I attenuate at lower frequencies since those usually do not contain the camera-induced stripes. If users have experimental induced stripes, they should lower the frequency threshold to include low frequency (spatially large) stripes. Example implementation \u00b6 Below is an example removal of stripes showing both the Fourier domain analysis in the top row and the real domain processing in the bottom row. Bottom right shows the difference between the original and filtered movie, indicating where the stripes have been removed. removeStripsFromMovie \u00b6 To run this on any inputMovie movie matrix already loaded in MATLAB, do the following. % This will produce a result similar to above. removeStripsFromMovie(inputMovie,'stripOrientation',both,'meanFilterSize',7,'freqLowExclude',10,'bandpassType','highpass') calciumImagingAnalysis \u00b6 To use within the calciumImagingAnalysis class, select modelPreprocessMovie module and have stripeRemoval selected then on the options page, choose whether to remove vertical, horizontal, or both stripes.","title":"Stripe removal"},{"location":"help_stripe_removal/#stripe-removal-from-movies","text":"Some cameras will produce vertical and/or horizontal stripes in the movies that users will want to remove. Below is an example of process to remove strip from movies. The underlying function is removeStripsFromMovie and users can remove using modelPreprocessMovie module in the calciumImagingAnalysis class. Vertical and horizontal stripes can be removed with the vertical and horizontal aspect of the the Fourier spectrum. In my default implementation for users I attenuate at lower frequencies since those usually do not contain the camera-induced stripes. If users have experimental induced stripes, they should lower the frequency threshold to include low frequency (spatially large) stripes.","title":"Stripe removal from movies"},{"location":"help_stripe_removal/#example-implementation","text":"Below is an example removal of stripes showing both the Fourier domain analysis in the top row and the real domain processing in the bottom row. Bottom right shows the difference between the original and filtered movie, indicating where the stripes have been removed.","title":"Example implementation"},{"location":"help_stripe_removal/#removestripsfrommovie","text":"To run this on any inputMovie movie matrix already loaded in MATLAB, do the following. % This will produce a result similar to above. removeStripsFromMovie(inputMovie,'stripOrientation',both,'meanFilterSize',7,'freqLowExclude',10,'bandpassType','highpass')","title":"removeStripsFromMovie"},{"location":"help_stripe_removal/#calciumimaginganalysis","text":"To use within the calciumImagingAnalysis class, select modelPreprocessMovie module and have stripeRemoval selected then on the options page, choose whether to remove vertical, horizontal, or both stripes.","title":"calciumImagingAnalysis"},{"location":"help_temporal_downsampling/","text":"Preprocessing: Temporal downsampling \u00b6 Example code to run the downsample test function with the following commands: loadRepoFunctions; testMovie = loadMovieList('pathToMovieFile'); unitTestDownsampleMovie(testMovie,'interp1Method','linear','cropSize',5); Below is an example pixel from a cell in a BLA animal. Note: ImageJ Scale... +bilinear+averaging (blue) and Matlab imresize +bilinear (red) both produce pretty much identical results. imresize using bilinear and bicubic produce similar results with bicubic having slower runtimes (e.g. on my machine 3.46 vs. 4.31 sec if set cropSize to 100). The number next to each name is the vector's variance.","title":"Temporal downsampling"},{"location":"help_temporal_downsampling/#preprocessing-temporal-downsampling","text":"Example code to run the downsample test function with the following commands: loadRepoFunctions; testMovie = loadMovieList('pathToMovieFile'); unitTestDownsampleMovie(testMovie,'interp1Method','linear','cropSize',5); Below is an example pixel from a cell in a BLA animal. Note: ImageJ Scale... +bilinear+averaging (blue) and Matlab imresize +bilinear (red) both produce pretty much identical results. imresize using bilinear and bicubic produce similar results with bicubic having slower runtimes (e.g. on my machine 3.46 vs. 4.31 sec if set cropSize to 100). The number next to each name is the vector's variance.","title":"Preprocessing: Temporal downsampling"},{"location":"install/","text":"Quick start guide \u00b6 Below are steps needed to quickly get started using the calciumImagingAnalysis software package in MATLAB. Clone the calciumImagingAnalysis repository (using GitHub desktop or command line) or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis root folder ( NOT @calciumImagingAnalysis sub-folder in the repository). Alternatively, download the package from File Exchange using the Add-Ons explorer in MATLAB. See calciumImagingAnalysis entry at: or https://www.mathworks.com/matlabcentral/fileexchange/75466-calciumimaginganalysis . Run the below MATLAB commands. % Run these commands in MATLAB to get started. % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Runs routines to check dependencies and help user get setup. obj.setup; % Open the class menu (always type `obj` then enter load the class/modules menu) obj % then hit enter, no semicolon! Afterwards, likely want to run modelAddNewFolders module first in order to add folders containing imaging data to the current class object. [Optional] Users on Windows systems should download Everything ( https://www.voidtools.com/ ). It is a very useful and extremely fast search engine for files and folders on a computer that can allow users to quickly get lists of folders then need to analyze in calciumImagingAnalysis . [Optional] Users who want to run analysis via the command line can run edit ciapkg.demo.cmdLinePipeline and run each segment of code there to see what commands are needed to perform each step. It assumes you have already run example_downloadTestData . calciumImagingAnalysis main GUI notes \u00b6 All main decisions for choosing a method/procedure to run, cell-extraction algorithm, and which folders to analyze are in a single window. The GUI will real-time update the selected folders based on the selections in the subject, assay, and folder filter areas. Sections not relevant for a specific method are grayed out. Tab to cycle through selection areas. Green background is the currently selected area, dark gray background is area that had previously been selected but is not the active area, and white background is for areas that have not been selected yet. Hover mouse over method names for tooltip that gives additional information. For example, selecting middle two assays automatically changes selection in Loaded folders section. Certain sections become available when user selects the appropriate method (e.g. cell-extraction method available when selecting modelExtractSignalsFromMovie ). Additional quick start notes \u00b6 See additional details in Processing calcium imaging data for running the full processing pipeline. Settings used to pre-process imaging movies ( modelPreprocessMovie module) are stored inside the HDF5 file to allow calciumImagingAnalysis to load them again later. To force load all directories, including most external software packages (in _external_programs folder), type ciapkg.loadAllDirs; into MATLAB command line. This is most relevant when you need to access specific functions in an outside repository that are normally hidden until needed. When issues are encountered, first check the *Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue or email Biafra (bahanonu [at] alum.mit.edu). Notes: There are two sets of test data that are downloaded: Single session analysis : data\\2014_04_01_p203_m19_check01_raw can be used to test the pipeline until the cross-session alignment step. Batch analysis : data\\batch contains three imaging sessions that should be processed and can then be used for the cross-session alignment step. Users should try these sessions to get used to batched analysis. For Fiji dependency, when path to Miji.m (e.g. \\Fiji.app\\scripts folder) is requested, likely in calciumImagingAnalysis\\_external_programs\\FIJI_FOLDER\\Fiji.app\\scripts where FIJI_FOLDER varies depending on OS, unless the user requested a custom path or on OSX (in which case, find Fiji the install directory). If you run into Java heap space memory errors when Miji tries to load Fiji in MATLAB, make sure \"java.opts\" file is in MATLAB start-up folder or that calciumImagingAnalysis folder is the MATLAB start-up folder ( instructions on changing ). calciumImagingAnalysis often uses regular expressions to find relevant movie and other files in folders to analyze. For example, by default it looks for any movie files in a folder containing concat , e.g. concat_recording_20140401_180333.h5 (test data). If you have a file called rawData_2019_01_01_myInterestingExperiment.avi and all your raw data files start with rawData_ then change the regular expression to rawData_ when requested by the repository. See setMovieInfo module to change after adding new folders. calciumImagingAnalysis generally assumes users have imaging data associated with one imaging session and animal in a given folder. Follow folder naming conventions in Data for best experience. External software packages are downloaded into _external_programs folder and should be placed there if done manually. Users can alternatively run setup as below. % Run these commands in MATLAB to get started. % Loads all directories loadBatchFxns; % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Download and load dependent software packages into \"_external_programs\" folder. % Also download test data into \"data\" folder. % Normally only need to one once after first downloading calciumImagingAnalysis package. obj.loadDependencies; % Add folders containing imaging data. obj.modelAddNewFolders; % [optional] Set the names calciumImagingAnalysis will look for in each folder obj.setMovieInfo; % Open class menu to pick module to run. obj.runPipeline; % then hit enter!","title":"Quick Start"},{"location":"install/#quick-start-guide","text":"Below are steps needed to quickly get started using the calciumImagingAnalysis software package in MATLAB. Clone the calciumImagingAnalysis repository (using GitHub desktop or command line) or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis root folder ( NOT @calciumImagingAnalysis sub-folder in the repository). Alternatively, download the package from File Exchange using the Add-Ons explorer in MATLAB. See calciumImagingAnalysis entry at: or https://www.mathworks.com/matlabcentral/fileexchange/75466-calciumimaginganalysis . Run the below MATLAB commands. % Run these commands in MATLAB to get started. % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Runs routines to check dependencies and help user get setup. obj.setup; % Open the class menu (always type `obj` then enter load the class/modules menu) obj % then hit enter, no semicolon! Afterwards, likely want to run modelAddNewFolders module first in order to add folders containing imaging data to the current class object. [Optional] Users on Windows systems should download Everything ( https://www.voidtools.com/ ). It is a very useful and extremely fast search engine for files and folders on a computer that can allow users to quickly get lists of folders then need to analyze in calciumImagingAnalysis . [Optional] Users who want to run analysis via the command line can run edit ciapkg.demo.cmdLinePipeline and run each segment of code there to see what commands are needed to perform each step. It assumes you have already run example_downloadTestData .","title":"Quick start guide"},{"location":"install/#calciumimaginganalysis-main-gui-notes","text":"All main decisions for choosing a method/procedure to run, cell-extraction algorithm, and which folders to analyze are in a single window. The GUI will real-time update the selected folders based on the selections in the subject, assay, and folder filter areas. Sections not relevant for a specific method are grayed out. Tab to cycle through selection areas. Green background is the currently selected area, dark gray background is area that had previously been selected but is not the active area, and white background is for areas that have not been selected yet. Hover mouse over method names for tooltip that gives additional information. For example, selecting middle two assays automatically changes selection in Loaded folders section. Certain sections become available when user selects the appropriate method (e.g. cell-extraction method available when selecting modelExtractSignalsFromMovie ).","title":"calciumImagingAnalysis main GUI notes"},{"location":"install/#additional-quick-start-notes","text":"See additional details in Processing calcium imaging data for running the full processing pipeline. Settings used to pre-process imaging movies ( modelPreprocessMovie module) are stored inside the HDF5 file to allow calciumImagingAnalysis to load them again later. To force load all directories, including most external software packages (in _external_programs folder), type ciapkg.loadAllDirs; into MATLAB command line. This is most relevant when you need to access specific functions in an outside repository that are normally hidden until needed. When issues are encountered, first check the *Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue or email Biafra (bahanonu [at] alum.mit.edu). Notes: There are two sets of test data that are downloaded: Single session analysis : data\\2014_04_01_p203_m19_check01_raw can be used to test the pipeline until the cross-session alignment step. Batch analysis : data\\batch contains three imaging sessions that should be processed and can then be used for the cross-session alignment step. Users should try these sessions to get used to batched analysis. For Fiji dependency, when path to Miji.m (e.g. \\Fiji.app\\scripts folder) is requested, likely in calciumImagingAnalysis\\_external_programs\\FIJI_FOLDER\\Fiji.app\\scripts where FIJI_FOLDER varies depending on OS, unless the user requested a custom path or on OSX (in which case, find Fiji the install directory). If you run into Java heap space memory errors when Miji tries to load Fiji in MATLAB, make sure \"java.opts\" file is in MATLAB start-up folder or that calciumImagingAnalysis folder is the MATLAB start-up folder ( instructions on changing ). calciumImagingAnalysis often uses regular expressions to find relevant movie and other files in folders to analyze. For example, by default it looks for any movie files in a folder containing concat , e.g. concat_recording_20140401_180333.h5 (test data). If you have a file called rawData_2019_01_01_myInterestingExperiment.avi and all your raw data files start with rawData_ then change the regular expression to rawData_ when requested by the repository. See setMovieInfo module to change after adding new folders. calciumImagingAnalysis generally assumes users have imaging data associated with one imaging session and animal in a given folder. Follow folder naming conventions in Data for best experience. External software packages are downloaded into _external_programs folder and should be placed there if done manually. Users can alternatively run setup as below. % Run these commands in MATLAB to get started. % Loads all directories loadBatchFxns; % Loads the class into an object for use in this session obj = calciumImagingAnalysis; % Download and load dependent software packages into \"_external_programs\" folder. % Also download test data into \"data\" folder. % Normally only need to one once after first downloading calciumImagingAnalysis package. obj.loadDependencies; % Add folders containing imaging data. obj.modelAddNewFolders; % [optional] Set the names calciumImagingAnalysis will look for in each folder obj.setMovieInfo; % Open class menu to pick module to run. obj.runPipeline; % then hit enter!","title":"Additional quick start notes"},{"location":"install2/","text":"Installation \u00b6 Note, this is an alternative method of installation to that outlined in Quick Start . Clone the calciumImagingAnalysis repository or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis folder. Run loadBatchFxns.m before using functions in the directory. This adds all needed directories and sub-directories to the MATLAB path. Type obj = calciumImagingAnalysis; into MATLAB command window and follow instructions that appear after to add data and run analysis. Run the calciumImagingAnalysis class method loadDependencies or type obj.loadDependencies after initializing a calciumImagingAnalysis object into the command window to download and add Fiji to path, download CNMF/CNMF-E repositories, download/setup CVX (for CNMF/CNMF-E), and download example data. Note Place calciumImagingAnalysis in a folder where MATLAB will have write permissions, as it also creates a private subdirectory to store some user information along with downloading required external software packages. file_exchange folder contains File Exchange functions used by calciumImagingAnalysis . In general, it is best to set the MATLAB startup directory to the calciumImagingAnalysis folder. This allows java.opts and startup.m to set the correct Java memory requirements and load the correct folders into the MATLAB path. If calciumImagingAnalysis IS NOT the startup folder, place java.opts wherever the MATLAB startup folder is so the correct Java memory requirements are set (important for using ImageJ/Miji in MATLAB). If it appears an old calciumImagingAnalysis repository is loaded after pulling a new version, run restoredefaultpath and check that old calciumImagingAnalysis folders are not in the MATLAB path.","title":"Install"},{"location":"install2/#installation","text":"Note, this is an alternative method of installation to that outlined in Quick Start . Clone the calciumImagingAnalysis repository or download the repository zip and unzip. Point the MATLAB path to the calciumImagingAnalysis folder. Run loadBatchFxns.m before using functions in the directory. This adds all needed directories and sub-directories to the MATLAB path. Type obj = calciumImagingAnalysis; into MATLAB command window and follow instructions that appear after to add data and run analysis. Run the calciumImagingAnalysis class method loadDependencies or type obj.loadDependencies after initializing a calciumImagingAnalysis object into the command window to download and add Fiji to path, download CNMF/CNMF-E repositories, download/setup CVX (for CNMF/CNMF-E), and download example data. Note Place calciumImagingAnalysis in a folder where MATLAB will have write permissions, as it also creates a private subdirectory to store some user information along with downloading required external software packages. file_exchange folder contains File Exchange functions used by calciumImagingAnalysis . In general, it is best to set the MATLAB startup directory to the calciumImagingAnalysis folder. This allows java.opts and startup.m to set the correct Java memory requirements and load the correct folders into the MATLAB path. If calciumImagingAnalysis IS NOT the startup folder, place java.opts wherever the MATLAB startup folder is so the correct Java memory requirements are set (important for using ImageJ/Miji in MATLAB). If it appears an old calciumImagingAnalysis repository is loaded after pulling a new version, run restoredefaultpath and check that old calciumImagingAnalysis folders are not in the MATLAB path.","title":"Installation"},{"location":"license/","text":"License \u00b6 Copyright (C) 2013-2020 Biafra Ahanonu This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"license/#license","text":"Copyright (C) 2013-2020 Biafra Ahanonu This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"License"},{"location":"notes/","text":"Repository notes \u00b6 Covers preprocessing of calcium imaging videos, cell and activity trace extraction (supports the following methods: PCA-ICA, CELLMax, EXTRACT, CNMF, CNMF-E, and ROI), manual and automated sorting of cell extraction outputs, cross-session alignment of cells, and more. Supports PCA-ICA , CNMF , CNMF-E , and ROI cell extraction methods publicly along with CELLMax and EXTRACT for Schnitzer Lab collaborators. Additional methods can be integrated upon request. Most extensively tested on Windows MATLAB 2018b and 2019a . Moderate testing on Windows MATLAB 2015b , 2017a , 2017b , and 2018b along with OSX (10.10.5) 2017b and 2018b . Individual functions and calciumImagingAnalysis class should work on other MATLAB versions after 2015b , but submit an issue if errors occur. Newer MATLAB version preferred. This repository consists of code used in and released with G. Corder , __B. Ahanonu __, B. F. Grewe, D. Wang, M. J. Schnitzer, and G. Scherrer (2019). An amygdalar neural ensemble encoding the unpleasantness of painful experiences. Science , 363, 276-281. http://science.sciencemag.org/content/363/6424/276 . and similar code helped process imaging or behavioral data in: J.G. Parker , J.D. Marshall , B. Ahanonu , Y.W. Wu, T.H. Kim, B.F. Grewe, Y. Zhang, J.Z. Li, J.B. Ding, M.D. Ehlers, and M.J. Schnitzer (2018). Diametric neural ensemble dynamics in parkinsonian and dyskinetic states. Nature , 557, 177\u2013182. https://doi.org/10.1038/s41586-018-0090-6 . Y. Li, A. Mathis, B.F. Grewe, J.A. Osterhout, B. Ahanonu, M.J. Schnitzer, V.N. Murthy, and C. Dulac (2017). Neuronal representation of social information in the medial amygdala of awake behaving mice. Cell, 171(5), 1176-1190. https://doi.org/10.1016/j.cell.2017.10.015 . Code mostly developed while in Prof. Mark Schnitzer's lab at Stanford University. Credit to those who helped in Acknowledgments . Please check the 'Wiki' for further instructions on specific processing/analysis steps and additional information of software used by this package. When issues are encountered, first check the Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue.","title":"Notes"},{"location":"notes/#repository-notes","text":"Covers preprocessing of calcium imaging videos, cell and activity trace extraction (supports the following methods: PCA-ICA, CELLMax, EXTRACT, CNMF, CNMF-E, and ROI), manual and automated sorting of cell extraction outputs, cross-session alignment of cells, and more. Supports PCA-ICA , CNMF , CNMF-E , and ROI cell extraction methods publicly along with CELLMax and EXTRACT for Schnitzer Lab collaborators. Additional methods can be integrated upon request. Most extensively tested on Windows MATLAB 2018b and 2019a . Moderate testing on Windows MATLAB 2015b , 2017a , 2017b , and 2018b along with OSX (10.10.5) 2017b and 2018b . Individual functions and calciumImagingAnalysis class should work on other MATLAB versions after 2015b , but submit an issue if errors occur. Newer MATLAB version preferred. This repository consists of code used in and released with G. Corder , __B. Ahanonu __, B. F. Grewe, D. Wang, M. J. Schnitzer, and G. Scherrer (2019). An amygdalar neural ensemble encoding the unpleasantness of painful experiences. Science , 363, 276-281. http://science.sciencemag.org/content/363/6424/276 . and similar code helped process imaging or behavioral data in: J.G. Parker , J.D. Marshall , B. Ahanonu , Y.W. Wu, T.H. Kim, B.F. Grewe, Y. Zhang, J.Z. Li, J.B. Ding, M.D. Ehlers, and M.J. Schnitzer (2018). Diametric neural ensemble dynamics in parkinsonian and dyskinetic states. Nature , 557, 177\u2013182. https://doi.org/10.1038/s41586-018-0090-6 . Y. Li, A. Mathis, B.F. Grewe, J.A. Osterhout, B. Ahanonu, M.J. Schnitzer, V.N. Murthy, and C. Dulac (2017). Neuronal representation of social information in the medial amygdala of awake behaving mice. Cell, 171(5), 1176-1190. https://doi.org/10.1016/j.cell.2017.10.015 . Code mostly developed while in Prof. Mark Schnitzer's lab at Stanford University. Credit to those who helped in Acknowledgments . Please check the 'Wiki' for further instructions on specific processing/analysis steps and additional information of software used by this package. When issues are encountered, first check the Common issues and fixes Wiki page to see if a solution is there. Else, submit a new issue.","title":"Repository notes"},{"location":"organization/","text":"Repository organization \u00b6 Below are a list of the top-level directories and what types of functions or files are within. @calciumImagingAnalysis - Contains calciumImagingAnalysis class and associated methods for calcium imaging analysis. external programs _ - External software packages (e.g. CNMF, CELLMax, and others) are stored here. overloaded - Functions that overload core MATLAB functions to add functionality or fix display issues. behavior - Processing of behavior files (e.g. accelerometer data, Saleae files, etc.). classification - Classification of cells, e.g. manual classification of cell extraction outputs or cross-session grouping of cells. data - Location of test data. download - Functions that help download external code packages or data. file_exchange - Contains any outside code from MATLAB's File Exchange that are dependencies in repository functions. hdf5 - Functions concerned with HDF5 input/output. image - Functions concerned with processing images (or [x y] matrices). inscopix - Functions concerned with Inscopix-specific data processing (e.g. using the ISX MATLAB API). io - Contains functions concerned with file or function input-output. motion_correction - Functions concerned with motion correction. movie_processing - Functions concerned with preprocessing calcium imaging videos, e.g. spatial filtering, downsampling, etc. neighbor - Detection and display of neighboring cell information. private - This directory contains various user settings, output pictures/data/logs from calciumImagingAnalysis modules, and more. This directory is NOT included in the MATLAB path, hence is good for storing related scripts without interfering with calciumImagingAnalysis . python - Python code, e.g. for processing Saleae data. serial - Code for saving and processing serial port data, e.g. Arduino streaming data. settings - Functions concerned with settings for other functions. signal_extraction - Functions related to cell extraction, e.g. running PCA-ICA. signal_processing - Functions to process cell activity traces. tracking - ImageJ and MATLAB functions to track animal location in behavior movies. unit_tests [optional] - Functions to validate specific repository functions. video - Functions to manipulate or process videos, e.g. making movie montages or adding dropped frames. view - Functions concerned with displaying data or information to the user, normally do not process data.","title":"Organization"},{"location":"organization/#repository-organization","text":"Below are a list of the top-level directories and what types of functions or files are within. @calciumImagingAnalysis - Contains calciumImagingAnalysis class and associated methods for calcium imaging analysis. external programs _ - External software packages (e.g. CNMF, CELLMax, and others) are stored here. overloaded - Functions that overload core MATLAB functions to add functionality or fix display issues. behavior - Processing of behavior files (e.g. accelerometer data, Saleae files, etc.). classification - Classification of cells, e.g. manual classification of cell extraction outputs or cross-session grouping of cells. data - Location of test data. download - Functions that help download external code packages or data. file_exchange - Contains any outside code from MATLAB's File Exchange that are dependencies in repository functions. hdf5 - Functions concerned with HDF5 input/output. image - Functions concerned with processing images (or [x y] matrices). inscopix - Functions concerned with Inscopix-specific data processing (e.g. using the ISX MATLAB API). io - Contains functions concerned with file or function input-output. motion_correction - Functions concerned with motion correction. movie_processing - Functions concerned with preprocessing calcium imaging videos, e.g. spatial filtering, downsampling, etc. neighbor - Detection and display of neighboring cell information. private - This directory contains various user settings, output pictures/data/logs from calciumImagingAnalysis modules, and more. This directory is NOT included in the MATLAB path, hence is good for storing related scripts without interfering with calciumImagingAnalysis . python - Python code, e.g. for processing Saleae data. serial - Code for saving and processing serial port data, e.g. Arduino streaming data. settings - Functions concerned with settings for other functions. signal_extraction - Functions related to cell extraction, e.g. running PCA-ICA. signal_processing - Functions to process cell activity traces. tracking - ImageJ and MATLAB functions to track animal location in behavior movies. unit_tests [optional] - Functions to validate specific repository functions. video - Functions to manipulate or process videos, e.g. making movie montages or adding dropped frames. view - Functions concerned with displaying data or information to the user, normally do not process data.","title":"Repository organization"},{"location":"pipeline_animal_tracking/","text":"ImageJ+MATLAB based mouse location tracking \u00b6 Functions needed (have entire calciumImagingAnalysis loaded anyways): mm_tracking.ijm is the tracking function for use in ImageJ, place in plugins folder. If already had calciumImagingAnalysis download Fiji, place in the _external_programs/[Fiji directory]/Fiji.app/plugins folder. removeIncorrectObjs.m is a function to clean-up the ImageJ output. createTrackingOverlayVideo is a way to check the output from the tracking by overlaying mouse tracker onto the video. Instructions for ImageJ and Matlab \u00b6 Example screen after running mm_tracking within ImageJ, click to expand. After the above screen, there will be multiple other screens culminating in one where a threshold is chosen that is used to remove non-animal pixels from analysis. The threshold matters quite a bit and the script ignores anything that isn't red (i.e. larger than threshold) OR not within the range specified by the parameters below. The script opens the AVI as a virtual stack and asks for the threshold is so that I can quickly scan through the entire movie to make sure the set threshold works even with slight/major changes in illumination, e.g. the below threshold will work across many frames If the threshold is set to low, certain frames will not have the animal detected, e.g. if the lighting changes. Once ImageJ is finished, within Matlab run the following code (cleans up the ImageJ tracking by removing small objects and adding NaNs for missing frames along with making a movie to check output). Modify to point toward paths specific for your data. % CSV file from imageJ and AVI movie path used in ImageJ moviePath = 'PATH_TO_AVI_USED_IN_IMAEJ'; csvPath = 'PATH_TO_CSV_OUTPUT_BY_IMAGEJ'; % clean up tracking [trackingTableFilteredCell] = removeIncorrectObjs(csvPath,'inputMovie',{moviePath}); % make tracking video % frames to use as example check nFrames=1500:2500; inputMovie = loadMovieList(moviePath,'frameList',nFrames); [inputTrackingVideo] = createTrackingOverlayVideo(inputMovie,movmean(trackingTableFilteredCell.XM(nFrames),5),movmean(trackingTableFilteredCell.YM(nFrames),5)); playMovie(inputTrackingVideo); Example output from 2017_09_11_p540_m381_openfield01_091112017 \u00b6 Using createTrackingOverlayVideo to verify tracking matches animal position on a per frame basis.","title":"Animal tracking"},{"location":"pipeline_animal_tracking/#imagejmatlab-based-mouse-location-tracking","text":"Functions needed (have entire calciumImagingAnalysis loaded anyways): mm_tracking.ijm is the tracking function for use in ImageJ, place in plugins folder. If already had calciumImagingAnalysis download Fiji, place in the _external_programs/[Fiji directory]/Fiji.app/plugins folder. removeIncorrectObjs.m is a function to clean-up the ImageJ output. createTrackingOverlayVideo is a way to check the output from the tracking by overlaying mouse tracker onto the video.","title":"ImageJ+MATLAB based mouse location tracking"},{"location":"pipeline_animal_tracking/#instructions-for-imagej-and-matlab","text":"Example screen after running mm_tracking within ImageJ, click to expand. After the above screen, there will be multiple other screens culminating in one where a threshold is chosen that is used to remove non-animal pixels from analysis. The threshold matters quite a bit and the script ignores anything that isn't red (i.e. larger than threshold) OR not within the range specified by the parameters below. The script opens the AVI as a virtual stack and asks for the threshold is so that I can quickly scan through the entire movie to make sure the set threshold works even with slight/major changes in illumination, e.g. the below threshold will work across many frames If the threshold is set to low, certain frames will not have the animal detected, e.g. if the lighting changes. Once ImageJ is finished, within Matlab run the following code (cleans up the ImageJ tracking by removing small objects and adding NaNs for missing frames along with making a movie to check output). Modify to point toward paths specific for your data. % CSV file from imageJ and AVI movie path used in ImageJ moviePath = 'PATH_TO_AVI_USED_IN_IMAEJ'; csvPath = 'PATH_TO_CSV_OUTPUT_BY_IMAGEJ'; % clean up tracking [trackingTableFilteredCell] = removeIncorrectObjs(csvPath,'inputMovie',{moviePath}); % make tracking video % frames to use as example check nFrames=1500:2500; inputMovie = loadMovieList(moviePath,'frameList',nFrames); [inputTrackingVideo] = createTrackingOverlayVideo(inputMovie,movmean(trackingTableFilteredCell.XM(nFrames),5),movmean(trackingTableFilteredCell.YM(nFrames),5)); playMovie(inputTrackingVideo);","title":"Instructions for ImageJ and Matlab"},{"location":"pipeline_animal_tracking/#example-output-from-2017_09_11_p540_m381_openfield01_091112017","text":"Using createTrackingOverlayVideo to verify tracking matches animal position on a per frame basis.","title":"Example output from 2017_09_11_p540_m381_openfield01_091112017"},{"location":"pipeline_detailed/","text":"Detailed processing pipeline \u00b6 Spatially downsample raw movies or convert to HDF5 with modelDownsampleRawMovies \u00b6 Users have the ability to spatially downsample raw movies, often necessary to denoise the data, save storage space, and improve runtimes of later processing steps. For most data, users can downsample 2 or 4 times in each spatial dimension while still retaining sufficient pixels per cell to facilitate cell-extraction. To run, either select modelDownsampleRawMovies in the GUI menu or type the below command after initializing a calciumImagingAnalysis obj. obj.modelDownsampleRawMovies; This will pop-up the following screen. Users can - input several folders where ISXD files are by separating each folder path with a comma ( Folder(s) where raw HDF5s are located ), - specify a common root folder to save files to ( Folder to save downsampled HDF5s to: ), - and input a root directory that contains the sub-folders with the raw data ( Decompression source root folder(s) ). The function will automatically put each file in its corresponding folder, make sure folder names are unique (this should be done anyways for data analysis reasons). Converting Inscopix ISXD files to HDF5 \u00b6 To convert from Inscopix ISXD file format (output by nVista v3+ and nVoke) to HDF5 run modelDownsampleRawMovies without changing the regular expression or make sure it looks for .*.isxd or similar. Users will need the latest version of the Inscopix Data Processing Software as these functions take advantage of their API. If calciumImagingAnalysis cannot automatically find the API, it will ask the user to direct it to the root location of the Inscopix Data Processing Software (see below). Check movie registration before pre-processing with viewMovieRegistrationTest \u00b6 Users should spatially filter one-photon or other data with background noise (e.g. neuropil). To get a feel for how the different spatial filtering affects SNR/movie data before running the full processing pipeline, run viewMovieRegistrationTest module. Then select either matlab divide by lowpass before registering or matlab bandpass before registering then change filterBeforeRegFreqLow and filterBeforeRegFreqHigh settings, see below. Within each folder will be a sub-folder called preprocRunTest inside of which is a series of sub-folders called preprocRun## that will contain a file called settings.mat that can be loaded into modelPreprocessMovie so the same settings that worked during the test can be used during the actual pre-processing run. You'll get an output like the below: A : The top left is without any filtering while the other 3 are with different bandpass filtering options. B : Cell \u0394F/F intensity profile from the raw movie. Obtain by selecting Analyze->Plot profile from Fiji menu after selecting a square segment running through a cell. C : Same cell \u0394F/F intensity profile from the bottom/left movie (note the y-axis is the same as above). Obtained in same manner as B . Preprocessing calcium imaging movies with modelPreprocessMovie \u00b6 After users instantiate an object of the calciumImagingAnalysis class and enter a folder, they can start preprocessing of their calcium imaging data with modelPreprocessMovie . See below for a series of windows to get started, the options for motion correction, cropping unneeded regions, \u0394_F/F_, and temporal downsampling were selected for use in the study associated with this repository. If users have not specified the path to Miji, a window appears asking them to select the path to Miji's scripts folder. If users are using the test dataset, it is recommended that they do not use temporal downsampling. Vertical and horizontal stripes in movies (e.g. CMOS camera artifacts) can be removed via stripeRemoval step. Remember to select correct stripOrientationRemove , stripSize , and stripfreqLowExclude options in the preprocessing options menu. Next the user is presented with a series of options for motion correction, image registration, and cropping.: The options highlighted in green are those that should be considered by users. Users can over their mouse over each option to get tips on what they mean. In particular, make sure that inputDatasetName is correct for HDF5 files and that fileFilterRegexp matches the form of the calcium imaging movie files to be analyzed. After this, the user is asked to let the algorithm know how many frames of the movie to analyze (defaults to all frames). Then the user is asked to select a region to use for motion correction. In general, it is best to select areas with high contrast and static markers such as blood vessels. Stay away from the edge of the movie or areas outside the brain (e.g. the edge of microendoscope GRIN lens in one-photon miniature microscope movies). Save/load preprocessing settings \u00b6 Users can also enable saving and loading of previously selected pre-processing settings by changing the red option below. Settings loaded from previous run (e.g. of modelPreprocessMovie ) or file (e.g. from viewMovieRegistrationTest runs) are highlighted in orange. Settings that user has just changed are still highlighted in green. The algorithm will then run all the requested preprocessing steps and presented the user with the option of viewing a slice of the processed file. Users have now completed pre-processing. Manual movie cropping with modelModifyMovies \u00b6 If users need to eliminate specific regions of their movie before running cell extraction, that option is provided. Users select a region using an ImageJ interface and select done when they want to move onto the next movie or start the cropping. Movies have NaNs or 0s added in the cropped region rather than changing the dimensions of the movie. Extracting cells with modelExtractSignalsFromMovie \u00b6 Users can run PCA-ICA, CNMF, CNMF-E, and ROI cell extraction by following the below set of option screens. Details on running the new Schnitzer lab cell-extraction methods will be added here after they are released. We normally estimate the number of PCs and ICs on the high end, manually sort to get an estimate of the number of cells, then run PCA-ICA again with IC 1.5-3x the number of cells and PCs 1-1.5x number of ICs. To run CNMF or CNMF-E, run loadDependencies module (e.g. obj.loadDependencies ) after calciumImagingAnalysis class is loaded. CVX (a CNMF dependency) will also be downloaded and cvx_setup run to automatically set it up. The resulting output (on Figure 45+ ) at the end should look something like: Loading cell-extraction output data with modelVarsFromFiles \u00b6 In general, after running cell-extraction ( modelExtractSignalsFromMovie ) on a dataset, run the modelVarsFromFiles module. This allows calciumImagingAnalysis to load/pre-load information about that cell-extraction run. If you had to restart MATLAB or are just loading calciumImagingAnalysis fresh but have previously run cell extraction, run this method before doing anything else with that cell-extraction data. A menu will pop-up like below when modelVarsFromFiles is loaded, you can normally just leave the defaults as is. Validating cell extraction with viewCellExtractionOnMovie \u00b6 After users have run cell extraction, they should check that cells are not being missed during the process. Running the method viewCellExtractionOnMovie will create a movie with outlines of cell extraction outputs overlaid on the movie. Below is an example, with black outlines indicating location of cell extraction outputs. If users see active cells (red flashes) that are not outlined, that indicates either exclusion or other parameters should be altered in the previous modelExtractSignalsFromMovie cell extraction step. Sorting cell extraction outputs with computeManualSortSignals \u00b6 Outputs from PCA-ICA (and most other common cell extraction algorithms like CNMF, etc.) output signal sources that are not cells and thus must be manually removed from the output. The repository contains a GUI for sorting cells from not cells. GUI also contains a shortcut menu that users can access by right-clicking or selecting the top-left menu. Below users can see a list of options that are given before running the code, those highlighted in green GUI usage on large imaging datasets \u00b6 To manually sort on large movies that will not fit into RAM, select the below options (highlighted in green). This will load only chunks of the movie asynchronously into the GUI as you sort cell extraction outputs. Usage \u00b6 Below are two examples of the interface and code to run if not using the calciumImagingAnalysis GUI. Usage instructions below for signalSorter.m : Main inputs inputImages - [x y N] matrix where N = number of images, x/y are dimensions. inputSignals - [N frames] double matrix where N = number of signals (traces). inputMovie - [x y frames] matrix Main outputs choices - [N 1] vector of 1 = cell, 0 = not a cell inputImagesSorted - [x y N] filtered by choices inputSignalsSorted - [N frames] filtered by choice iopts.inputMovie = inputMovie; % movie associated with traces iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [inputImagesSorted, inputSignalsSorted, choices] = signalSorter(inputImages, inputSignals, 'options',iopts); BLA one-photon imaging data signal sorting GUI \u00b6 mPFC one-photon imaging data signal sorting GUI (from example_downloadTestData.m ) \u00b6 Context menu \u00b6 Removing cells not within brain region with modelModifyRegionAnalysis \u00b6 If the imaging field-of-view includes cells from other brain regions, they can be removed using modelModifyRegionAnalysis Cross-session cell alignment with computeMatchObjBtwnTrials \u00b6 This step allows users to align cells across imaging sessions (e.g. those taken on different days). See the Cross session cell alignment wiki page for more details and notes on cross-session alignment. Users run computeMatchObjBtwnTrials to do cross-day alignment (first row in pictures below). Users then run viewMatchObjBtwnSessions to get a sense for how well the alignment ran. computeCellDistances and computeCrossDayDistancesAlignment allow users to compute the within session pairwise Euclidean centroid distance for all cells and the cross-session pairwise distance for all global matched cells, respectively. Users can then get the matrix that gives the session IDs % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs; View cross-session cell alignment with viewMatchObjBtwnSessions \u00b6 To evaluate how well cross-session alignment works, computeMatchObjBtwnTrials will automatically run viewMatchObjBtwnSessions at the end, but users can also run it separately after alignment. The left are raw dorsal striatum cell maps from a single animal. The right shows after cross-session alignment; color is used to indicate a global ID cell (e.g. the same cell matched across multiple days). Thus, same color cell = same cell across sessions. Save cross-session cell alignment with modelSaveMatchObjBtwnTrials \u00b6 Users can save out the alignment structure by running modelSaveMatchObjBtwnTrials . This will allow users to select a folder where calciumImagingAnalysis will save a MAT-file with the alignment structure information for each animal.","title":"Step-by-step"},{"location":"pipeline_detailed/#detailed-processing-pipeline","text":"","title":"Detailed processing pipeline"},{"location":"pipeline_detailed/#spatially-downsample-raw-movies-or-convert-to-hdf5-with-modeldownsamplerawmovies","text":"Users have the ability to spatially downsample raw movies, often necessary to denoise the data, save storage space, and improve runtimes of later processing steps. For most data, users can downsample 2 or 4 times in each spatial dimension while still retaining sufficient pixels per cell to facilitate cell-extraction. To run, either select modelDownsampleRawMovies in the GUI menu or type the below command after initializing a calciumImagingAnalysis obj. obj.modelDownsampleRawMovies; This will pop-up the following screen. Users can - input several folders where ISXD files are by separating each folder path with a comma ( Folder(s) where raw HDF5s are located ), - specify a common root folder to save files to ( Folder to save downsampled HDF5s to: ), - and input a root directory that contains the sub-folders with the raw data ( Decompression source root folder(s) ). The function will automatically put each file in its corresponding folder, make sure folder names are unique (this should be done anyways for data analysis reasons).","title":"Spatially downsample raw movies or convert to HDF5 with modelDownsampleRawMovies"},{"location":"pipeline_detailed/#converting-inscopix-isxd-files-to-hdf5","text":"To convert from Inscopix ISXD file format (output by nVista v3+ and nVoke) to HDF5 run modelDownsampleRawMovies without changing the regular expression or make sure it looks for .*.isxd or similar. Users will need the latest version of the Inscopix Data Processing Software as these functions take advantage of their API. If calciumImagingAnalysis cannot automatically find the API, it will ask the user to direct it to the root location of the Inscopix Data Processing Software (see below).","title":"Converting Inscopix ISXD files to HDF5"},{"location":"pipeline_detailed/#check-movie-registration-before-pre-processing-with-viewmovieregistrationtest","text":"Users should spatially filter one-photon or other data with background noise (e.g. neuropil). To get a feel for how the different spatial filtering affects SNR/movie data before running the full processing pipeline, run viewMovieRegistrationTest module. Then select either matlab divide by lowpass before registering or matlab bandpass before registering then change filterBeforeRegFreqLow and filterBeforeRegFreqHigh settings, see below. Within each folder will be a sub-folder called preprocRunTest inside of which is a series of sub-folders called preprocRun## that will contain a file called settings.mat that can be loaded into modelPreprocessMovie so the same settings that worked during the test can be used during the actual pre-processing run. You'll get an output like the below: A : The top left is without any filtering while the other 3 are with different bandpass filtering options. B : Cell \u0394F/F intensity profile from the raw movie. Obtain by selecting Analyze->Plot profile from Fiji menu after selecting a square segment running through a cell. C : Same cell \u0394F/F intensity profile from the bottom/left movie (note the y-axis is the same as above). Obtained in same manner as B .","title":"Check movie registration before pre-processing with viewMovieRegistrationTest"},{"location":"pipeline_detailed/#preprocessing-calcium-imaging-movies-with-modelpreprocessmovie","text":"After users instantiate an object of the calciumImagingAnalysis class and enter a folder, they can start preprocessing of their calcium imaging data with modelPreprocessMovie . See below for a series of windows to get started, the options for motion correction, cropping unneeded regions, \u0394_F/F_, and temporal downsampling were selected for use in the study associated with this repository. If users have not specified the path to Miji, a window appears asking them to select the path to Miji's scripts folder. If users are using the test dataset, it is recommended that they do not use temporal downsampling. Vertical and horizontal stripes in movies (e.g. CMOS camera artifacts) can be removed via stripeRemoval step. Remember to select correct stripOrientationRemove , stripSize , and stripfreqLowExclude options in the preprocessing options menu. Next the user is presented with a series of options for motion correction, image registration, and cropping.: The options highlighted in green are those that should be considered by users. Users can over their mouse over each option to get tips on what they mean. In particular, make sure that inputDatasetName is correct for HDF5 files and that fileFilterRegexp matches the form of the calcium imaging movie files to be analyzed. After this, the user is asked to let the algorithm know how many frames of the movie to analyze (defaults to all frames). Then the user is asked to select a region to use for motion correction. In general, it is best to select areas with high contrast and static markers such as blood vessels. Stay away from the edge of the movie or areas outside the brain (e.g. the edge of microendoscope GRIN lens in one-photon miniature microscope movies).","title":"Preprocessing calcium imaging movies with modelPreprocessMovie"},{"location":"pipeline_detailed/#saveload-preprocessing-settings","text":"Users can also enable saving and loading of previously selected pre-processing settings by changing the red option below. Settings loaded from previous run (e.g. of modelPreprocessMovie ) or file (e.g. from viewMovieRegistrationTest runs) are highlighted in orange. Settings that user has just changed are still highlighted in green. The algorithm will then run all the requested preprocessing steps and presented the user with the option of viewing a slice of the processed file. Users have now completed pre-processing.","title":"Save/load preprocessing settings"},{"location":"pipeline_detailed/#manual-movie-cropping-with-modelmodifymovies","text":"If users need to eliminate specific regions of their movie before running cell extraction, that option is provided. Users select a region using an ImageJ interface and select done when they want to move onto the next movie or start the cropping. Movies have NaNs or 0s added in the cropped region rather than changing the dimensions of the movie.","title":"Manual movie cropping with modelModifyMovies"},{"location":"pipeline_detailed/#extracting-cells-with-modelextractsignalsfrommovie","text":"Users can run PCA-ICA, CNMF, CNMF-E, and ROI cell extraction by following the below set of option screens. Details on running the new Schnitzer lab cell-extraction methods will be added here after they are released. We normally estimate the number of PCs and ICs on the high end, manually sort to get an estimate of the number of cells, then run PCA-ICA again with IC 1.5-3x the number of cells and PCs 1-1.5x number of ICs. To run CNMF or CNMF-E, run loadDependencies module (e.g. obj.loadDependencies ) after calciumImagingAnalysis class is loaded. CVX (a CNMF dependency) will also be downloaded and cvx_setup run to automatically set it up. The resulting output (on Figure 45+ ) at the end should look something like:","title":"Extracting cells with modelExtractSignalsFromMovie"},{"location":"pipeline_detailed/#loading-cell-extraction-output-data-with-modelvarsfromfiles","text":"In general, after running cell-extraction ( modelExtractSignalsFromMovie ) on a dataset, run the modelVarsFromFiles module. This allows calciumImagingAnalysis to load/pre-load information about that cell-extraction run. If you had to restart MATLAB or are just loading calciumImagingAnalysis fresh but have previously run cell extraction, run this method before doing anything else with that cell-extraction data. A menu will pop-up like below when modelVarsFromFiles is loaded, you can normally just leave the defaults as is.","title":"Loading cell-extraction output data with modelVarsFromFiles"},{"location":"pipeline_detailed/#validating-cell-extraction-with-viewcellextractiononmovie","text":"After users have run cell extraction, they should check that cells are not being missed during the process. Running the method viewCellExtractionOnMovie will create a movie with outlines of cell extraction outputs overlaid on the movie. Below is an example, with black outlines indicating location of cell extraction outputs. If users see active cells (red flashes) that are not outlined, that indicates either exclusion or other parameters should be altered in the previous modelExtractSignalsFromMovie cell extraction step.","title":"Validating cell extraction with viewCellExtractionOnMovie"},{"location":"pipeline_detailed/#sorting-cell-extraction-outputs-with-computemanualsortsignals","text":"Outputs from PCA-ICA (and most other common cell extraction algorithms like CNMF, etc.) output signal sources that are not cells and thus must be manually removed from the output. The repository contains a GUI for sorting cells from not cells. GUI also contains a shortcut menu that users can access by right-clicking or selecting the top-left menu. Below users can see a list of options that are given before running the code, those highlighted in green","title":"Sorting cell extraction outputs with computeManualSortSignals"},{"location":"pipeline_detailed/#gui-usage-on-large-imaging-datasets","text":"To manually sort on large movies that will not fit into RAM, select the below options (highlighted in green). This will load only chunks of the movie asynchronously into the GUI as you sort cell extraction outputs.","title":"GUI usage on large imaging datasets"},{"location":"pipeline_detailed/#usage","text":"Below are two examples of the interface and code to run if not using the calciumImagingAnalysis GUI. Usage instructions below for signalSorter.m : Main inputs inputImages - [x y N] matrix where N = number of images, x/y are dimensions. inputSignals - [N frames] double matrix where N = number of signals (traces). inputMovie - [x y frames] matrix Main outputs choices - [N 1] vector of 1 = cell, 0 = not a cell inputImagesSorted - [x y N] filtered by choices inputSignalsSorted - [N frames] filtered by choice iopts.inputMovie = inputMovie; % movie associated with traces iopts.valid = 'neutralStart'; % all choices start out gray or neutral to not bias user iopts.cropSizeLength = 20; % region, in px, around a signal source for transient cut movies (subplot 2) iopts.cropSize = 20; % see above iopts.medianFilterTrace = 0; % whether to subtract a rolling median from trace iopts.subtractMean = 0; % whether to subtract the trace mean iopts.movieMin = -0.01; % helps set contrast for subplot 2, preset movie min here or it is calculated iopts.movieMax = 0.05; % helps set contrast for subplot 2, preset movie max here or it is calculated iopts.backgroundGood = [208,229,180]/255; iopts.backgroundBad = [244,166,166]/255; iopts.backgroundNeutral = repmat(230,[1 3])/255; [inputImagesSorted, inputSignalsSorted, choices] = signalSorter(inputImages, inputSignals, 'options',iopts);","title":"Usage"},{"location":"pipeline_detailed/#bla-one-photon-imaging-data-signal-sorting-gui","text":"","title":"BLA one-photon imaging data signal sorting GUI"},{"location":"pipeline_detailed/#mpfc-one-photon-imaging-data-signal-sorting-gui-from-example_downloadtestdatam","text":"","title":"mPFC one-photon imaging data signal sorting GUI (from example_downloadTestData.m)"},{"location":"pipeline_detailed/#context-menu","text":"","title":"Context menu"},{"location":"pipeline_detailed/#removing-cells-not-within-brain-region-with-modelmodifyregionanalysis","text":"If the imaging field-of-view includes cells from other brain regions, they can be removed using modelModifyRegionAnalysis","title":"Removing cells not within brain region with modelModifyRegionAnalysis"},{"location":"pipeline_detailed/#cross-session-cell-alignment-with-computematchobjbtwntrials","text":"This step allows users to align cells across imaging sessions (e.g. those taken on different days). See the Cross session cell alignment wiki page for more details and notes on cross-session alignment. Users run computeMatchObjBtwnTrials to do cross-day alignment (first row in pictures below). Users then run viewMatchObjBtwnSessions to get a sense for how well the alignment ran. computeCellDistances and computeCrossDayDistancesAlignment allow users to compute the within session pairwise Euclidean centroid distance for all cells and the cross-session pairwise distance for all global matched cells, respectively. Users can then get the matrix that gives the session IDs % Global IDs is a matrix of [globalID sessionID] % Each (globalID, sessionID) pair gives the within session ID for that particular global ID globalIDs = alignmentStruct.globalIDs;","title":"Cross-session cell alignment with computeMatchObjBtwnTrials"},{"location":"pipeline_detailed/#view-cross-session-cell-alignment-with-viewmatchobjbtwnsessions","text":"To evaluate how well cross-session alignment works, computeMatchObjBtwnTrials will automatically run viewMatchObjBtwnSessions at the end, but users can also run it separately after alignment. The left are raw dorsal striatum cell maps from a single animal. The right shows after cross-session alignment; color is used to indicate a global ID cell (e.g. the same cell matched across multiple days). Thus, same color cell = same cell across sessions.","title":"View cross-session cell alignment with viewMatchObjBtwnSessions"},{"location":"pipeline_detailed/#save-cross-session-cell-alignment-with-modelsavematchobjbtwntrials","text":"Users can save out the alignment structure by running modelSaveMatchObjBtwnTrials . This will allow users to select a folder where calciumImagingAnalysis will save a MAT-file with the alignment structure information for each animal.","title":"Save cross-session cell alignment with modelSaveMatchObjBtwnTrials"},{"location":"pipeline_overview/","text":"Processing calcium imaging data \u00b6 The general pipeline for processing calcium imaging data is below. This repository includes code to do nearly every step. To start using the calciumImagingAnalysis software package, enter the following into the MATLAB command window. % Loads all directories loadBatchFxns; % Loads the class into an object. obj = calciumImagingAnalysis; % Open the class menu obj % then hit enter, no semicolon! % Alternatively obj.runPipeline; % then hit enter! The general order of functions that users should run is ([optional] are those not critical for most datasets): loadDependencies If user is running calciumImagingAnalysis for the first time, this module has several options to download and load CNMF/CNMF-E code for cell extraction, Fiji for viewing/modifying videos (using Miji), and test data from a miniature microscope experiment. modelDownsampleRawMovies [optional] If users have raw calcium imaging data that needs to be spatially downsampled, e.g. raw data from Inscopix nVista software. modelAddNewFolders Users should always use this method first, used to add folders to the current class object. For example, if users ran example_downloadTestData.m , then add the folder [githubRepoPath]\\data\\2014_04_01_p203_m19_check01_raw where githubRepoPath is the absolute path to the current calciumImagingAnalysis repository. viewMovie Users should check that calciumImagingAnalysis loads their movies correctly and that Miji is working. Users can view movies from disk, which allows checking of very large movies quickly. Remember to check that Imaging movie regexp: (regular expression class uses to find user movies within given folders) setting matches name of movies currently in repository. viewMovieRegistrationTest [optional] Users can check different spatial filtering and registration settings. tregRunX folders (where X is a number) contain details of each run setting. Delete from analysis folder if don't need outputs later. Remember to adjust contrast in resulting montage movies since different filtering will change the absolute pixel values. modelPreprocessMovie Main processing method for calciumImagingAnalysis. Performs motion correction, spatial filtering, cropping, down-sampling, and relative fluorescence calculations. If using Inscopix nVista 1.0 or 2.0, also will correct for dropped frames. modelModifyMovies GUI that allows users to remove movie regions not relevant to cell extraction. modelExtractSignalsFromMovie Performs cell extraction, currently PCA-ICA with the ability to run more recent algorithms (e.g. CNMF) upon request. modelVarsFromFiles Run after modelExtractSignalsFromMovie to load cell image and trace information into the current class object. viewCellExtractionOnMovie [optional] This function overlays the cell extraction outputs on snippets of the processed video, allowing users to check that cell extraction correctly identified all the cells. computeManualSortSignals A GUI to allow users to classify cells and not cells in cell extraction outputs. modelModifyRegionAnalysis [optional] Users are able to select specific cells from cell extraction manual sorting to include in further analyses. computeMatchObjBtwnTrials Method to register cells across imaging sessions. Also includes visual check GUI in viewMatchObjBtwnSessions method. Note: it is heavily advised that throughout a particular animal's imaging sessions, that you keep the acquisition frame dimensions identical. This makes cross-session registration easier. Else you will have to crop all sessions for that animal to the same size ensuring that the area of interest is present in each.","title":"Overview"},{"location":"pipeline_overview/#processing-calcium-imaging-data","text":"The general pipeline for processing calcium imaging data is below. This repository includes code to do nearly every step. To start using the calciumImagingAnalysis software package, enter the following into the MATLAB command window. % Loads all directories loadBatchFxns; % Loads the class into an object. obj = calciumImagingAnalysis; % Open the class menu obj % then hit enter, no semicolon! % Alternatively obj.runPipeline; % then hit enter! The general order of functions that users should run is ([optional] are those not critical for most datasets): loadDependencies If user is running calciumImagingAnalysis for the first time, this module has several options to download and load CNMF/CNMF-E code for cell extraction, Fiji for viewing/modifying videos (using Miji), and test data from a miniature microscope experiment. modelDownsampleRawMovies [optional] If users have raw calcium imaging data that needs to be spatially downsampled, e.g. raw data from Inscopix nVista software. modelAddNewFolders Users should always use this method first, used to add folders to the current class object. For example, if users ran example_downloadTestData.m , then add the folder [githubRepoPath]\\data\\2014_04_01_p203_m19_check01_raw where githubRepoPath is the absolute path to the current calciumImagingAnalysis repository. viewMovie Users should check that calciumImagingAnalysis loads their movies correctly and that Miji is working. Users can view movies from disk, which allows checking of very large movies quickly. Remember to check that Imaging movie regexp: (regular expression class uses to find user movies within given folders) setting matches name of movies currently in repository. viewMovieRegistrationTest [optional] Users can check different spatial filtering and registration settings. tregRunX folders (where X is a number) contain details of each run setting. Delete from analysis folder if don't need outputs later. Remember to adjust contrast in resulting montage movies since different filtering will change the absolute pixel values. modelPreprocessMovie Main processing method for calciumImagingAnalysis. Performs motion correction, spatial filtering, cropping, down-sampling, and relative fluorescence calculations. If using Inscopix nVista 1.0 or 2.0, also will correct for dropped frames. modelModifyMovies GUI that allows users to remove movie regions not relevant to cell extraction. modelExtractSignalsFromMovie Performs cell extraction, currently PCA-ICA with the ability to run more recent algorithms (e.g. CNMF) upon request. modelVarsFromFiles Run after modelExtractSignalsFromMovie to load cell image and trace information into the current class object. viewCellExtractionOnMovie [optional] This function overlays the cell extraction outputs on snippets of the processed video, allowing users to check that cell extraction correctly identified all the cells. computeManualSortSignals A GUI to allow users to classify cells and not cells in cell extraction outputs. modelModifyRegionAnalysis [optional] Users are able to select specific cells from cell extraction manual sorting to include in further analyses. computeMatchObjBtwnTrials Method to register cells across imaging sessions. Also includes visual check GUI in viewMatchObjBtwnSessions method. Note: it is heavily advised that throughout a particular animal's imaging sessions, that you keep the acquisition frame dimensions identical. This makes cross-session registration easier. Else you will have to crop all sessions for that animal to the same size ensuring that the area of interest is present in each.","title":"Processing calcium imaging data"},{"location":"questions/","text":"Questions? \u00b6 Please open an issue on GitHub or email any additional questions not covered in the repository to bahanonu [at] alum.mit.edu .","title":"Questions"},{"location":"questions/#questions","text":"Please open an issue on GitHub or email any additional questions not covered in the repository to bahanonu [at] alum.mit.edu .","title":"Questions?"},{"location":"references/","text":"References \u00b6 Please cite Corder , Ahanonu , et al. 2019 Science publication or the Ahanonu, 2018 Zenodo release if you used the software package or code from this repository to advance/help your research: @article{corderahanonu2019amygdalar, title={An amygdalar neural ensemble that encodes the unpleasantness of pain}, author={Corder, Gregory and Ahanonu, Biafra and Grewe, Benjamin F and Wang, Dong and Schnitzer, Mark J and Scherrer, Gr{\\'e}gory}, journal={Science}, volume={363}, number={6424}, pages={276--281}, year={2019}, publisher={American Association for the Advancement of Science} } @misc{biafra_ahanonu_2018_2222295, author = {Biafra Ahanonu}, title = {{calciumImagingAnalysis: a software package for analyzing one- and two-photon calcium imaging datasets.}}, month = December, year = 2018, doi = {10.5281/zenodo.2222295}, url = {https://doi.org/10.5281/zenodo.2222295} }","title":"Cite"},{"location":"references/#references","text":"Please cite Corder , Ahanonu , et al. 2019 Science publication or the Ahanonu, 2018 Zenodo release if you used the software package or code from this repository to advance/help your research: @article{corderahanonu2019amygdalar, title={An amygdalar neural ensemble that encodes the unpleasantness of pain}, author={Corder, Gregory and Ahanonu, Biafra and Grewe, Benjamin F and Wang, Dong and Schnitzer, Mark J and Scherrer, Gr{\\'e}gory}, journal={Science}, volume={363}, number={6424}, pages={276--281}, year={2019}, publisher={American Association for the Advancement of Science} } @misc{biafra_ahanonu_2018_2222295, author = {Biafra Ahanonu}, title = {{calciumImagingAnalysis: a software package for analyzing one- and two-photon calcium imaging datasets.}}, month = December, year = 2018, doi = {10.5281/zenodo.2222295}, url = {https://doi.org/10.5281/zenodo.2222295} }","title":"References"}]}